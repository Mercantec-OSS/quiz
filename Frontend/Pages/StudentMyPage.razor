@page "/MyPage"
@inject NavigationManager NavigationManager

<PageTitle>My page</PageTitle>

<Row>
    <Column ColumnSize="ColumnSize.Is9">
        <h1>My Page</h1>
    </Column>
    <Column ColumnSize="ColumnSize.Is3">
        <h2>
            Avg. score: <Span>@CalculateAverage()</Span>
        </h2>
    </Column>
</Row>

<GenericListComponent T="User_QuizQuizInfoDTO" Items="quizzesLink"
NoItemsText="You don't have any quiz assigned to you.'">
    <BodyContent>
        <Column ColumnSize="ColumnSize.Is4">
            <Card>
                <CardHeader>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is8">
                            <h3 class="card-title">@context.quiz.Title</h3>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is4">
                            <h4 class="text-end">@context.quiz.Creator</h4>
                        </Column>
                    </Row>
                </CardHeader>
                <CardBody>
                    <Row>
                        <Column>
                            Category: @context.quiz.Category
                        </Column>
                        <Column>
                            Difficulty: @context.quiz.Difficulty
                        </Column>
                        <Column>
                            @context.Results%
                        </Column>
                    </Row>
                </CardBody>
                <CardFooter>
                    @if (!context.Completed)
                    {
                        <Button Class="btn btn-primary w-100"
                                Clicked="() => StartQuiz(context.quiz.ID ?? 0)"
                                Disabled="@context.Completed">
                            Start
                        </Button>
                    }
                    else
                    {
                        <p class="text-center">Completed</p>
                    }
                </CardFooter>
            </Card>
        </Column>
    </BodyContent>
</GenericListComponent>

@code {
    [CascadingParameter(Name = "HttpHandler")]
    private HttpHandler? httpHandler { get; set; }

    [CascadingParameter(Name = "JWTokenHandler")]
    private JWTokenHandler? jWTokenHandler { get; set; }

    [CascadingParameter(Name = "SessionStorageHandler")]
    private SessionStorageHandler? sessionStorageHandler { get; set; }

    private List<User_QuizQuizInfoDTO>? quizzesLink = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (httpHandler == null) return;
            if (jWTokenHandler == null) return;
            if (sessionStorageHandler == null) return;

            string jwt = await jWTokenHandler.GetToken();
            int id = await sessionStorageHandler.GetItem<int>(SessionStorageHandler.Item.userID);

            (HttpStatusCode statusCode, List<User_QuizQuizInfoDTO> response) =
                await httpHandler.GetAsync<List<User_QuizQuizInfoDTO>>(
                    $"api/User_Quiz/AllUserQuiz/{id}", jwt);

            if (statusCode == HttpStatusCode.OK)
            {
                quizzesLink = response;
                await InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private string CalculateAverage()
    {
        if (quizzesLink == null)
        {
            return "Loading...";
        }
        else if (!quizzesLink.Any() || !quizzesLink.Any(ql => ql.Completed))
        {
            return "0";
        }

        List<User_QuizQuizInfoDTO> quizCompleted = quizzesLink.Where(ql => ql.Completed).ToList();
        double result = Math.Round(quizCompleted.Average(ql => ql.Results), 2);
        return result.ToString();
    }

    private void StartQuiz(int quizID)
    {
        if (quizID == 0)
        {
            return;
        }

        NavigationManager.NavigateTo($"/quiz_ui?quiz_id={Uri.EscapeDataString(quizID.ToString())}");
    }
}
