<CustomModal Title="@quiz.Title" @ref="modal" size="ModalSize.Large" OnClose="Close"
             OnPrimaryAction="OpenAddStudentsModal" PrimaryButtonText="Add Student(s)">
    <BodyContent>
        <GenericListComponent T="User_QuizUserInfoDTO" Items="usersToQuiz" NoItemsText="No students found assigned to this quiz">
            <BodyContent>
                <Column ColumnSize="ColumnSize.Is6">
                    <Card>
                        <CardHeader>
                            <Div Class="Split">
                                @context.User.username

                                <Button Color="Color.Primary" Clicked="() => OpenDeleteUserFromQuizConfimationModal(context)">
                                    <i class="fa-solid fa-user-slash"></i>
                                </Button>
                            </Div>
                        </CardHeader>
                        <CardBody>
                            <Row>
                                <Column ColumnSize="ColumnSize.Is6">
                                    <p class="card-text">Email: @context.User.email</p>
                                </Column>
                                <Column ColumnSize="ColumnSize.Is6">
                                    <p class="card-text">Score: @context.Results</p>
                                </Column>
                            </Row>
                        </CardBody>
                    </Card>
                </Column>
            </BodyContent>
        </GenericListComponent>
    </BodyContent>
</CustomModal>

<CustomModal Title="@deleteConfirmationTitle" @ref="deleteConfirmationModal" size="ModalSize.Small"
             DefaultOnClose="true" PrimaryButtonText="Confirm" OnPrimaryAction="DeletionConfirmed">
    <BodyContent>
        This action can't be undone.
    </BodyContent>
</CustomModal>

@code {
    [CascadingParameter(Name = "HttpHandler")]
    private HttpHandler? httpHandler { get; set; }

    [CascadingParameter(Name = "JWTokenHandler")]
    private JWTokenHandler? jWTokenHandler { get; set; }

    [CascadingParameter(Name = "LoadingSpinner")]
    private LoadingSpinner? loading { get; set; }

    private CustomModal? modal;
    private CustomModal? deleteConfirmationModal;

    private const string deleteConfirmationTitleBase = "Remove ";
    private const string deleteConfirmationTitleEnd = " form this quiz?";
    private string deleteConfirmationTitle = "";

    private QuizDTO quiz = new();
    private List<User_QuizUserInfoDTO>? usersToQuiz = null;
    private User_QuizUserInfoDTO userToBeRemoved = new();
    private Action<QuizDTO>? openAddStudentsModal;

    public async void Open(QuizDTO quiz, Action<QuizDTO> openAddStudentsModal)
    {
        if (httpHandler == null) return;
        if (jWTokenHandler == null) return;

        modal?.Show();
        loading?.Start();

        string jwt = await jWTokenHandler.GetToken();
        this.quiz = quiz;
        this.openAddStudentsModal = openAddStudentsModal;

        (HttpStatusCode statusCode, List<User_QuizUserInfoDTO> response) =
           await httpHandler.GetAsync<List<User_QuizUserInfoDTO>>(
               $"/api/User_Quiz/AllStudents/{quiz.ID}", jwt);

        if (statusCode == HttpStatusCode.OK)
        {
            usersToQuiz = response;
            StateHasChanged();
        }

        loading?.Stop();
    }

    private void Close()
    {
        usersToQuiz = null;
        StateHasChanged();
        modal?.Hide();
    }

    private void OpenAddStudentsModal()
    {
        Close();
        openAddStudentsModal?.Invoke(quiz);
    }

    private void OpenDeleteUserFromQuizConfimationModal(User_QuizUserInfoDTO user)
    {
        userToBeRemoved = user;
        deleteConfirmationTitle = deleteConfirmationTitleBase + user.User.username + deleteConfirmationTitleEnd;
        StateHasChanged();

        deleteConfirmationModal?.Show();
    }

    private async void DeletionConfirmed()
    {
        if (httpHandler == null) return;
        if (jWTokenHandler == null) return;

        string jwt = await jWTokenHandler.GetToken();
        loading?.Start();

        HttpStatusCode statusCode = await httpHandler.DeleteAsync(
            $"/api/User_Quiz/{quiz.ID}/{userToBeRemoved.User.ID}", jwt);

        if (statusCode == HttpStatusCode.NoContent && usersToQuiz != null)
        {
            usersToQuiz.Remove(userToBeRemoved);
            StateHasChanged();
        }

        deleteConfirmationModal?.Hide();
        loading?.Stop();
    }
}
