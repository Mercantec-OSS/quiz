<LoadingSpinner @ref="loading" />
<JWTokenHandler @ref="jWTokenHandler" />

<CustomModal Title="@quiz.Title" @ref="modal" size="ModalSize.Large" OnClose="Close"
             OnPrimaryAction="OpenAddStudentsModal" PrimaryButtonText="Add Student(s)">
    <BodyContent>
        <GenericListComponent T="User_QuizUserInfoDTO" Items="usersToQuiz" NoItemsText="No students found assigned to this quiz">
            <BodyContent>
                <Column ColumnSize="ColumnSize.Is6">
                    <Card>
                        <CardHeader>
                            @context.User.username
                        </CardHeader>
                        <CardBody>
                            <Row>
                                <Column ColumnSize="ColumnSize.Is6">
                                    <p class="card-text">Email: @context.User.email</p>
                                </Column>
                                <Column ColumnSize="ColumnSize.Is6">
                                    <p class="card-text">Score: @context.Results</p>
                                </Column>
                            </Row>
                        </CardBody>
                    </Card>
                </Column>
            </BodyContent>
        </GenericListComponent>
    </BodyContent>
</CustomModal>

@code {
    [Inject] public HttpClient? Http { get; set; }
    private LoadingSpinner? loading;
    private JWTokenHandler? jWTokenHandler;
    private CustomModal? modal;

    private QuizDTO quiz = new();
    private List<User_QuizUserInfoDTO>? usersToQuiz = null;
    private Action<QuizDTO>? openAddStudentsModal;

    public async void Open(QuizDTO quiz, Action<QuizDTO> openAddStudentsModal)
    {
        if (Http == null) return;
        if (jWTokenHandler == null) return;

        modal?.Show();
        loading?.Start();

        string jwt = await jWTokenHandler.GetToken();
        this.quiz = quiz;
        this.openAddStudentsModal = openAddStudentsModal;

        (HttpStatusCode statusCode, List<User_QuizUserInfoDTO>? response) =
           await HttpHandler.GetAsync<List<User_QuizUserInfoDTO>>(
               $"/api/User_Quiz/AllStudents/{quiz.ID}", jwt, Http);

        if (statusCode == HttpStatusCode.OK)
        {
            usersToQuiz = response ?? new();
            StateHasChanged();
        }

        loading?.Stop();
    }

    private void Close()
    {
        usersToQuiz = null;
        StateHasChanged();
        modal?.Hide();
    }

    private void OpenAddStudentsModal()
    {
        Close();
        openAddStudentsModal?.Invoke(quiz);
    }
}
