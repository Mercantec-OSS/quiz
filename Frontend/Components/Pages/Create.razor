@page "/create"
@rendermode InteractiveServer
@using API.Models
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml

<PageTitle>Create</PageTitle>

<div>
    @foreach (var question in Questions)
    {
        <div>
            <h5>Question @((Questions.IndexOf(question) + 1))</h5>


            <input type="text" placeholder="Enter question" @bind="question.QuestionText"> <br> <br>

            @* simple drop down menu, not important *@
            <div class="drop-menu">

                <table>
                    <tr>
                        <td>
                            <div class="dropdown">
                                <button class="btn btn-primary dropdown-toggle" @onclick="ToggleDropdown">
                                    @selectedItem
                                </button>
                                <div class="dropdown-menu @dropdownClass">
                                    @foreach (var item in items)
                                    {
                                        <a class="dropdown-item" @onclick="() => SelectItem(item)">@item</a>
                                    }
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="dropdown1">
                                <button class="btn btn-primary dropdown-toggle" @onclick="ToggleDropdown1">
                                    @selectedItem1
                                </button>
                                <div class="dropdown-menu @dropdownClass1">
                                    @foreach (var item1 in items1)
                                    {
                                        <a class="dropdown-item" @onclick="() => SelectItem1(item1)">@item1</a>
                                    }
                                </div>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
            @* end of dropdown menu  *@
            <br/>



            <div class="answer-option">
                <input type="checkbox" @bind="question.CorrectAnswers[0]" />
                <input type="text" placeholder="Enter answer 1" @bind="question.Answer1" />

                <input type="checkbox" @bind="question.CorrectAnswers[1]" />
                <input type="text" placeholder="Enter answer 2" @bind="question.Answer2" />

                <input type="checkbox" @bind="question.CorrectAnswers[2]" />
                <input type="text" placeholder="Enter answer 3" @bind="question.Answer3" />

                <input type="checkbox" @bind="question.CorrectAnswers[3]" />
                <input type="text" placeholder="Enter answer 4" @bind="question.Answer4" />

            </div> <br> <br>

            <button class="btn btn-secondary" @onclick="() => ToggleAnswerCard(question)"> Show question & Answer</button>

            @if (SelectedQuestion != null && SelectedQuestion.Id == question.Id)
            {
                <div class="card" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-body">
                            <h5 class="card-title">@SelectedQuestion.QuestionText</h5>
                            <p class="card-text">
                                @if (SelectedQuestion.CorrectAnswers[0])
                                {
                                <p>@SelectedQuestion.Answer1</p>
                                }
                                @if (SelectedQuestion.CorrectAnswers[1])
                                {
                                <p>@SelectedQuestion.Answer2</p>
                                }
                                @if (SelectedQuestion.CorrectAnswers[2])
                                {
                                <p>@SelectedQuestion.Answer3</p>
                                }
                                @if (SelectedQuestion.CorrectAnswers[3])
                                {
                                <p>@SelectedQuestion.Answer4</p>
                                }
                            </p>
                        </h5>
                    </div>
                </div>
            }

        </div>
        <hr>
    }
</div>


 <br>



<button class="btn btn-primary" @onclick="AddNewQuestion" disabled="@(Questions.Count >= MaxQuestions)">Add New Question</button>

<button class="btn btn-success" @onclick="SaveQuestions">Save Questions</button>

<div>
    <h3>Upload Questions from Excel</h3>
    <InputFile OnChange="UploadExcel" />
    <br /><br />
</div>

@if (Questions.Count >= MaxQuestions)
{
    <p style="color:red"> Max Questions Reached! (@MaxQuestions)</p>
}





@code {
    public class QuestionModel
    {
        public int Id { get; set; }
        public string QuestionText { get; set; }
        public string Category { get; set; }
        public string UnderCategory { get; set; }
        public string Answer1 { get; set; }
        public string Answer2 { get; set; }
        public string Answer3 { get; set; }
        public string Answer4 { get; set; }
        public bool[] CorrectAnswers { get; set; } = new bool[4]; //New property for multiple correct answers
        public string DifficultyLevel { get; set; }
        public bool QuestionStatus { get; set; }
        public int Time { get; set; }
        public int UserID { get; set; }
        public string Picture { get; set; }
    }

    public class Question
    {
        public int QuestionId { get; set; }
        public string QuestionText { get; set; }
        public string Answer1 { get; set; }
        public string Answer2 { get; set; }
        public string Answer3 { get; set; }
        public string Answer4 { get; set; }
        public string CorrectAnswer { get; set; }
    }

    private const int MaxQuestions = 25;
    private int nextQuestionId = 1;
    private List<QuestionModel> Questions = new List<QuestionModel>();
    private QuestionModel SelectedQuestion;

    [Inject] public HttpClient Http { get; set;}

    // mehtod to show the answer card
    private void ToggleAnswerCard(QuestionModel question)
    {
        if (SelectedQuestion == question)
        {
            SelectedQuestion = null;
        }
        else
        {
            SelectedQuestion = question;
        }
    }

    //method to add new question to the quiz
    private void AddNewQuestion()
    {
        if (Questions.Count < MaxQuestions) 
        {
            Questions.Add(new QuestionModel { Id = nextQuestionId++ });
        }
    }

    //method to check if an answer is selected
    private bool IsChecked(string selectedAnswer, string option)
    {
        return selectedAnswer == option;
    }

    private async Task SaveQuestions()
    {
        foreach (var question in Questions)
        {
            var correctAnswerIds = question.CorrectAnswers
            .Select((isCorrect, index) => isCorrect ? index + 1 : (int?)null)
            .Where(id => id.HasValue)
            .Select(id => id.Value)
            .ToArray();

            // var dto = new QuestionDTO
            //     {
            //         Title = question.QuestionText,
            //         Category = "Some Category",
            //         UnderCategory = "Some UnderCategory",
            //         PossibleAnswers = new[] { question.Answer1, question.Answer2, question.Answer3, question.Answer4 }, // Placeholder, replace with actual values
            //         CorrectAnswer = correctAnswerIds,
            //         Picture = "some_url",
            //         Time = 30,
            //         DifficultyLevel = "Unassigned",
            //         QuestionStatus = true,
            //         UserID = 1
            //     };


            // try
            // {
            //     // Send the POST request
            //     var response = await Http.PostAsJsonAsync("https://mercantec-quiz.onrender.com/api/Questions", dto);

            //     // Check if the request was successful
            //     if (response.IsSuccessStatusCode)
            //     {
            //         Console.WriteLine($"Question '{dto.Title}' saved successfully.");
            //     }
            //     else
            //     {
            //         // Log the status code and reason phrase in case of failure
            //         Console.WriteLine($"Failed to save question '{dto.Title}': {response.StatusCode} - {response.ReasonPhrase}");
            //     }
            // }
            // catch (Exception ex)
            // {
            //     // Log any exceptions that occur during the request
            //     Console.WriteLine($"Error saving question '{dto.Title}': {ex.Message}");
            // }
            


        }
    }



    //Helper method to map Selected answer

    private int ConvertAnswerToId(String selectedAnswer)
    {
        //this is a simple way
        switch (selectedAnswer)
        {
            case "option1": return 1;
            case "option2": return 2;
            case "option3": return 3;
            case "option4": return 4;
            default: return 0; //No Answer selected 
        }
    }

   //simple drop down menu stuff

    // List of items in the dropdown menu
    private List<string> items = new List<string>
    {
        "Item 1", "Item 2", "Item 3", "Item 4"
    };

    // Selected item from the dropdown
    private string selectedItem = "Select an Item";

    // CSS class for dropdown visibility
    private string dropdownClass = "";

    // Toggle the visibility of the dropdown menu
    private void ToggleDropdown()
    {
        dropdownClass = dropdownClass == "" ? "show" : "";
    }

    // Set the selected item and close the dropdown
    private void SelectItem(string item)
    {
        selectedItem = item;
        dropdownClass = ""; // Hide the dropdown
    }


    //simple drop down menu stuff

    // List of items in the dropdown menu
    private List<string> items1 = new List<string>
    {
        "Item 1", "Item 2", "Item 3", "Item 4"
    };

    // Selected item from the dropdown
    private string selectedItem1 = "Select an Item";

    // CSS class for dropdown visibility
    private string dropdownClass1 = "";

    // Toggle the visibility of the dropdown menu
    private void ToggleDropdown1()
    {
        dropdownClass1 = dropdownClass1 == "" ? "show" : "";
    }

    // Set the selected item and close the dropdown
    private void SelectItem1(string item1)
    {
        selectedItem1 = item1;
        dropdownClass1 = ""; // Hide the dropdown
    }

    //uploading the excel file to the database
    private async Task UploadExcel(InputFileChangeEventArgs e)
    {
        try
        {
            // Set the license context
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            var file = e.File;

            if (file != null)
            {
                using (var stream = new MemoryStream())
                {
                    await file.OpenReadStream().CopyToAsync(stream);

                    using (var package = new OfficeOpenXml.ExcelPackage(stream))
                    {
                        var worksheet = package.Workbook.Worksheets[0]; // Get the first worksheet

                        var rowCount = worksheet.Dimension.Rows;

                        for (int row = 2; row <= rowCount; row++) // Assuming row 1 has headers
                        {
                            var question = new QuestionModel
                                {
                                    Id = nextQuestionId++,
                                    QuestionText = worksheet.Cells[row, 1].Value?.ToString(),
                                    Answer1 = worksheet.Cells[row, 4].Value?.ToString(),
                                    Answer2 = worksheet.Cells[row, 5].Value?.ToString(),
                                    Answer3 = worksheet.Cells[row, 6].Value?.ToString(),
                                    Answer4 = worksheet.Cells[row, 7].Value?.ToString()
                                };

                            // Process Correct Answers (assuming "Correct" column has comma-separated correct answer indices)
                            var correctAnswers = worksheet.Cells[row, 8].Value?.ToString();
                            if (!string.IsNullOrEmpty(correctAnswers))
                            {
                                var correctIndices = correctAnswers.Split(',')
                                    .Select(x => int.TryParse(x.Trim(), out int result) ? result : 0)
                                    .Where(x => x > 0 && x <= 4)
                                    .ToList();

                                for (int i = 0; i < correctIndices.Count; i++)
                                {
                                    if (correctIndices[i] <= 4) // Assuming only 4 answers
                                    {
                                        question.CorrectAnswers[correctIndices[i] - 1] = true;
                                    }
                                }
                            }

                            // Set additional properties from the Excel columns
                            question.Category = worksheet.Cells[row, 2].Value?.ToString();
                            question.UnderCategory = worksheet.Cells[row, 3].Value?.ToString();
                            question.Picture = worksheet.Cells[row, 9].Value?.ToString();
                            question.Time = int.TryParse(worksheet.Cells[row, 10].Value?.ToString(), out int time) ? time : 30; // Default 30 seconds
                            question.DifficultyLevel = worksheet.Cells[row, 11].Value?.ToString() ?? "Unassigned";
                            question.QuestionStatus = worksheet.Cells[row, 12].Value?.ToString()?.ToLower() == "true" || worksheet.Cells[row, 12].Value?.ToString() == "1";
                            question.UserID = int.TryParse(worksheet.Cells[row, 13].Value?.ToString(), out int userId) ? userId : 1;


                            Questions.Add(question);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex.Message}");
        }
    }

}