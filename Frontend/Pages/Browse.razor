@page "/browse"

@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@using Microsoft.AspNetCore.WebUtilities;
@using System.Collections.Generic

<JWTokenHandler @ref="jWTokenHandler" />
<PageTitle>Browse</PageTitle>

<Row>
    <Column ColumnSize="ColumnSize.Is2">
        <h2>Browse</h2>
    </Column>

    <Column Class="mx-1" ColumnSize="ColumnSize.Is2">
        <Dropdown Display="Display.InlineBlock">
            <DropdownToggle Color="Color.Primary">
                @(selectedCreators == null ? "Filter by creators" : selectedCreators)
            </DropdownToggle>
            <DropdownMenu MaxMenuHeight="100px">
                <DropdownItem Clicked="() => SelectCreator(null)">Remove filter</DropdownItem>
                <DropdownDivider />
                @foreach (string creator in creators)
                {
                    <DropdownItem Clicked="() => SelectCreator(creator)">
                        @creator
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </Column>

    <Column Class="mx-1" ColumnSize="ColumnSize.Is2">
        <Dropdown Display="Display.InlineBlock">
            <DropdownToggle Color="Color.Primary">
                @(selectedCategory == null ? "Filter by categori" : selectedCategory)
            </DropdownToggle>
            <DropdownMenu MaxMenuHeight="100px">
                <DropdownItem Clicked="() => SelectCategory(null)">Remove filter</DropdownItem>
                <DropdownDivider />
                @foreach (string category in categories)
                {
                    <DropdownItem Clicked="() => SelectCategory(category)">
                        @category
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </Column>

    <Column Class="mx-1" ColumnSize="ColumnSize.Is2">
        <Dropdown Display="Display.InlineBlock">
            <DropdownToggle Color="Color.Primary">
                @(selectedDifficulty == null ? "Filter by difficulty" : selectedDifficulty)
            </DropdownToggle>
            <DropdownMenu MaxMenuHeight="100px">
                <DropdownItem Clicked="() => SelectDifficulty(null)">Remove filter</DropdownItem>
                <DropdownDivider />
                @foreach (string difficulty in difficulties)
                {
                    <DropdownItem Clicked="() => SelectDifficulty(difficulty)">
                        @difficulty
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </Column>
</Row>

@if (loading?.isLoading ?? false)
{
    <p>
        Loading...
    </p>
}
else
{
    <Row HorizontalGutter="10" VerticalGutter="10">
        @foreach (QuizDTO quiz in Sort())
        {
            <Column ColumnSize="ColumnSize.Is4">
                <Card>
                    <CardHeader>
                        <strong>@quiz.Title</strong>
                    </CardHeader>
                    <CardBody>
                        <Row>
                            <Column>
                                Category: @quiz.Category
                            </Column>
                            <Column>
                                Difficulty: @quiz.Difficulty
                            </Column>
                            <Column>
                                Questions: @quiz.QestionsAmount
                            </Column>
                        </Row>
                    </CardBody>
                    <CardFooter>
                        <Button Color="Color.Primary" Style="width: 100%" Clicked="() => StartQuiz(quiz.ID ?? 0)">
                            @(quiz.Creator == username ? "Try quiz" : "Start")
                        </Button>
                    </CardFooter>
                </Card>
            </Column>
        }
    </Row>
}

<LoadingSpinner @ref="loading" />

@code {
    [Inject] public HttpClient? Http { get; set; }
    private JWTokenHandler? jWTokenHandler;
    private List<QuizDTO> allQuizzes = new();

    private List<string> creators = new();
    private List<string> categories = new();
    private List<string> difficulties = new();

    private string? selectedCategory;
    private string? selectedCreators;
    private string? selectedDifficulty;

    private string dropdownCreator = string.Empty;
    private string dropdownCategory = string.Empty;
    private string dropdownDifficuly = string.Empty;

    private LoadingSpinner? loading;
    private string username = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Http == null) return;
            if (jWTokenHandler == null) return;

            string jwt = await jWTokenHandler.GetToken();
            string searchWord = "";
            loading?.Start();

            Uri? uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var dataValue))
            {
                searchWord = dataValue.ToArray()[0] ?? "";
            }

            Dictionary<string, string> parameters = new() { { "searchWord", searchWord } };

            (HttpStatusCode statusCode, List<QuizDTO>? response) =
                await HttpHandler.GetAsync<List<QuizDTO>>(
                    $"/api/Quizs/QuizSearch", parameters, jwt, Http);

            if (statusCode == HttpStatusCode.OK)
            {
                username = await sessionStorage.GetItemAsync<string>("userUsername");
                allQuizzes = response ?? new();
                Dictionary<string, int> creators = new();
                Dictionary<string, int> categories = new();
                Dictionary<string, int> difficulty = new();
                foreach (QuizDTO item in allQuizzes)
                {
                    if (!creators.TryAdd(item.Creator, 1))
                    {
                        creators[item.Creator]++;
                    }
                    if (!categories.TryAdd(item.Category, 1))
                    {
                        categories[item.Category]++;
                    }
                    if (!difficulty.TryAdd(item.Difficulty, 1))
                    {
                        difficulty[item.Difficulty]++;
                    }
                }

                this.creators = creators.Keys.ToList();
                this.categories = categories.Keys.ToList();
                this.difficulties = difficulty.Keys.ToList();
            }

            loading?.Stop();
            StateHasChanged();
        }
    }

    private void SelectCreator(string? creator) => selectedCreators = creator;
    private void SelectCategory(string? category) => selectedCategory = category;
    private void SelectDifficulty(string? difficult) => selectedDifficulty = difficult;

    private List<QuizDTO> Sort()
    {
        List<QuizDTO> quizzes = new();
        foreach (QuizDTO item in allQuizzes)
        {
            if (!string.IsNullOrEmpty(selectedCreators))
            {
                if (item.Creator != selectedCreators)
                {
                    continue;
                }
            }

            if (!string.IsNullOrEmpty(selectedCategory))
            {
                if (item.Category != selectedCategory)
                {
                    continue;
                }
            }

            if (!string.IsNullOrEmpty(selectedDifficulty))
            {
                if (item.Difficulty != selectedDifficulty)
                {
                    continue;
                }
            }

            quizzes.Add(item);
        }

        return quizzes;
    }

    private void StartQuiz(int quizID)
    {
        if (quizID == 0)
        {
            return;
        }

        NavigationManager.NavigateTo($"/quiz_ui?quiz_id={Uri.EscapeDataString(quizID.ToString())}");
    }
}
