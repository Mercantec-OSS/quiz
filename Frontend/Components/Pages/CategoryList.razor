@page "/CategoryList"
@rendermode InteractiveServer

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@using System.Net;
@using API.Models

<PageTitle>Category list</PageTitle>

<h3>CategoryList</h3>

<ul class="list-group my-2">
    @foreach (var (category, i) in categories.Select((category, index) => (category, index)))
    {
        <li class="list-group-item @(i % 2 == 1 ? "list-group-item-dark" : "list-group-item-light")"
            @onclick="() => categoryShowingUnderCategories != category ?
                GetSubCategories(category) : ClearSubCategories()">
            <div>
                <h4>
                    @category.Category
                </h4>
                @if (categoryShowingUnderCategories == category)
                {
                    if (underCategories == null)
                    {
                        <p style="border-top: 1px solid gray; padding-top: 10px;">
                            Loading...
                        </p>
                    }
                    else
                    {
                        if (underCategories.Count > 0)
                        {
                            foreach (var (item, x) in underCategories.Select((category, index) => (category, index)))
                            {
                                <p style="border-top: 1px solid gray; padding-top: 10px;">
                                    @item.UnderCategory
                                </p>
                            }
                        }
                        else
                        {
                            <p style="border-top: 1px solid gray; padding-top: 10px;">
                                No Under Category found.
                            </p>
                        }
                    }
                }
            </div>
        </li>
    }
</ul>

@if (isLoading)
{
    <div class="spinner-container">
        <div class="spinner"></div>
    </div>
}

@code {
    [Inject] public HttpClient? Http { get; set; }
    private List<Categories> categories = new();
    private Categories? categoryShowingUnderCategories;
    private List<UnderCategories>? underCategories;

    private bool isLoading = false;
    private string jwt = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Http == null) return;
            isLoading = true;

            jwt = await sessionStorage.GetItemAsync<string>("jwt");

            (HttpStatusCode statusCode, List<Categories>? response) =
                await HttpHandler.GetAsync<List<Categories>>("api/Categories", jwt, Http);

            if (statusCode == HttpStatusCode.OK)
            {
                categories = response ?? new();
            }

            isLoading = false;
            StateHasChanged();
        }
    }

    private Task ClearSubCategories()
    {
        underCategories = null;
        categoryShowingUnderCategories = null;
        return Task.CompletedTask;
    }

    private async Task GetSubCategories(Categories category)
    {
        await ClearSubCategories();
        categoryShowingUnderCategories = category;

        if (Http == null) return;

        (HttpStatusCode statusCode, List<UnderCategories>? response) =
            await HttpHandler.GetAsync<List<UnderCategories>>(
                $"api/UnderCategories/CategoryID/{category.ID}",
                jwt, Http);

        if (statusCode == HttpStatusCode.OK)
        {
            underCategories = response ?? new();
        }
        return;
    }
}
