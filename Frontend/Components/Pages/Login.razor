@page "/"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@namespace Login

@using Microsoft.AspNetCore.WebUtilities
@using API.Models
@using Frontend.Components.Layout

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<!-- Email and Password input fields -->
<div>
    <label for="email">Email:</label>
    <input type="email" @bind="loginRequest.email" id="email" />
</div>

<div>
    <label for="password">Password:</label>
    <input type="password" @bind="loginRequest.password" id="password" />
</div>

<div>
    <!-- Login button -->
    <button @onclick="HandleLogin">Login</button>

    @if (isLoading)
    {
        <div class="spinner-container">
            <div class="spinner"></div>
        </div>
    }
</div>

<div class="logout">
    <NavLink class="nav-link" href="#" @onclick="DeleteJwtCookie">
        <span class="bi bi-box-arrow-right" aria-hidden="true"></span>Log ud
    </NavLink>
</div>

<!-- Displaying response status, errors, and success message -->
@if (!string.IsNullOrEmpty(responseMessage))
{
    <p>@responseMessage</p>
}

@if (loginSuccess)
{

    <p><strong>Login Successful!</strong></p>
    <p>Email: @loginRequest.email</p>
    <p>Password: @loginRequest.password</p>
    <p>JWT: @jwtToken</p>

    Console.WriteLine(jwtToken);
}

@code {
    private LoginRequest loginRequest = new();
    private bool isLoading = false;
    private string responseMessage = string.Empty;
    private string jwtToken = string.Empty;
    private bool loginSuccess = false;
    [Inject] public HttpClient? Http { get; set; }

    // Method to handle login
    private async Task HandleLogin()
    {
        isLoading = true;
        try
        {
            if (Http == null)
                return;
            
            // Send POST request to login endpoint
            var response = await Http.PostAsJsonAsync("/api/Users/login", loginRequest);

            // Read response content
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                UserDTO? dTO = HttpHandler.Deserialize<UserDTO>(responseContent);
                if (dTO == null)
                    return;

                // If login is successful
                responseMessage = $"Status Code: {response.StatusCode}";
                jwtToken = dTO.token ?? "";  // Assuming the JWT is the response content
                loginSuccess = true;

                //store JWT in Cookies
                // await JSRuntime.InvokeVoidAsync("setCookie", "jwt", jwtToken, 60);
                await sessionStorage.SetItemAsync("jwt", jwtToken);
                MainLayout.jwtToken = jwtToken;
                MainLayout.userRole = dTO.role;

                //navigate to home when email/username and password is correct
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                // If login fails
                responseMessage = $"Error: {response.StatusCode}, Message: {responseContent}";
                loginSuccess = false;
            }
        }
        catch (Exception ex)
        {
            // Handling any exceptions
            responseMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // // Method to delete the JWT "session"
    private async Task DeleteJwtCookie()
    {
        // Invoking function to delete the cookie
        await sessionStorage.RemoveItemAsync("jwt");
        MainLayout.jwtToken = string.Empty;
        MainLayout.userRole = string.Empty;
    }
}

