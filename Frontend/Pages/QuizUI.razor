@page "/quiz_ui"

@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<JWTokenHandler @ref="jWTokenHandler" />
<LoadingSpinner @ref="loading" />

<PageTitle>@pageTitle</PageTitle>

@if (!ready)
{
    <h3>Quiz UI</h3>
    <Div>
        Are you ready?
        <Button Class="btn btn-primary" Clicked="Start">Start</Button>
    </Div>
}
else
{
    if (questions.Count > correctlyQuestionAnswering && correctlyQuestion != null)
    {
        <Row>
            <Column>
                <h3>@correctlyQuestion.Title</h3>
            </Column>
            <Column>
                <h2>@currentTime.ToString(currentTime.Hour > 0 ? "HH:mm:ss" : "mm:ss")</h2>
            </Column>
        </Row>

        <Row class="flex-fill d-flex flex-wrap" style="height: 40vh;">
            @foreach (var (cardText, i) in correctlyQuestion.PossibleAnswers.Select((category, index) => (category, index)))
            {
                <Column ColumnSize="ColumnSize.Is6" @onclick="() => SelectAnswer(i)">
                    <Div Class="card flex-fill text-center" Background="@(selectedAnswers[i] ? Background.Success : "")">
                        <Div class="card-body" style="max-height: 175px; overflow-y: auto;">
                            <h5 class="card-title">@cardText</h5>
                        </Div>
                    </Div>
                </Column>
            }
            <Button Class="btn btn-primary" Clicked="AnswerQuestion">Answer</Button>
        </Row>
    }
    else if (questions.Count <= correctlyQuestionAnswering && quiz != null)
    {
        <h3 class="w-100">Summery</h3>
        <Div Class="w-100">
            <h3 class="card-title">@quiz.Title</h3>
        </Div>

        <Column Class="w-100">
            <Card>
                <CardHeader>
                    <h3 class="card-title">@quiz.Title</h3>
                </CardHeader>
                <CardBody>
                    <Row>
                        <Column>
                            @answeredCorrectly.Count(a => a == true) / @questions.Count
                        </Column>
                        <Column>
                            @(Math.Round((double)answeredCorrectly.Count(isCorrect => isCorrect ?? false) / questions.Count * 100, 2))%
                        </Column>
                        <Column>
                            Points: @pointsGained
                        </Column>
                    </Row>
                </CardBody>
            </Card>
        </Column>

        <Button Color="Color.Primary" Clicked="@(async () => await HandleRedraw())">Redraw</Button>

        <LineChart Class="w-100" @ref="lineChart" TItem="double" />
    }
}

@code {
    [Inject] public HttpClient? Http { get; set; }
    private JWTokenHandler? jWTokenHandler;
    private LoadingSpinner? loading;
    private string pageTitle = "Quiz ui";
    private bool ready = false;
    private int quizID;
    private QuizDTO? quiz;
    private int pointsGained = 0;

    private bool[] selectedAnswers = new bool[0];
    private int correctlyQuestionAnswering = -1;
    private QuestionDTO? correctlyQuestion = null;
    private DateTime currentTime = new DateTime();

    private List<bool?> answeredCorrectly = new();
    private List<QuestionDTO> questions = new();

    private User_QuizDTO userQuiz = new();

    private Timer timer = new(1000)
        {
            AutoReset = true,
        };

    LineChart<double> lineChart;
    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<double> {
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble() };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timer.Stop();

            if (Http == null) return;
            if (jWTokenHandler == null) return;

            string jwt = await jWTokenHandler.GetToken();
            loading?.Start();

            // Getting the quiz id from the url, if it's invalid redirect to browse.
            Uri? uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("quiz_id", out var dataValue))
            {
                NavigationManager.NavigateTo("/browse");
                return;
            }

            // Invalid quiz id.
            if (!int.TryParse(dataValue[0], out quizID))
            {
                NavigationManager.NavigateTo("/browse");
                return;
            }

            int userID = await sessionStorage.GetItemAsync<int>("userID");
            (HttpStatusCode statusCodeUserQuiz, User_QuizDTO? userQuiz) =
                await HttpHandler.GetAsync<User_QuizDTO>(
                    $"/api/User_Quiz/{quizID}/{userID}", jwt, Http);

            string userRole = await sessionStorage.GetItemAsync<string>("userRole");
            if (statusCodeUserQuiz != HttpStatusCode.OK || (userRole == "Student" && userQuiz == null))
            {
                // Isn't invited to this quiz or has completed it before.
                NavigationManager.NavigateTo("/browse");
                return;
            }
            else
            {
                this.userQuiz = userQuiz ?? new();
            }

            (HttpStatusCode statusCodeQuiz, QuizDTO? quizDTO) =
               await HttpHandler.GetAsync<QuizDTO>(
                   $"/api/Quizs/{quizID}", jwt, Http);

            if (statusCodeQuiz == HttpStatusCode.OK)
            {
                quiz = quizDTO;
            }

            (HttpStatusCode statusCodeCuestions, List<QuestionDTO>? QuestionDTOs) =
                await HttpHandler.GetAsync<List<QuestionDTO>>(
                    $"/api/Questions/ByQuizID/{quizID}", jwt, Http);

            if (statusCodeCuestions == HttpStatusCode.OK && QuestionDTOs != null)
            {
                questions.AddRange(QuestionDTOs);
                timer.Elapsed += OnTimedEvent;
            }

            loading?.Stop();
        }
    }

    private void Start()
    {
        ready = true;
        OpenNextQuestion(false);
    }

    private void SelectAnswer(int answerIndex)
    {
        if (correctlyQuestion == null) return;

        selectedAnswers[answerIndex] = !selectedAnswers[answerIndex];
        if (correctlyQuestion.QuestionType != "Multi")
        {
            for (int i = 0; i < selectedAnswers.Length; i++)
            {
                if (i != answerIndex)
                {
                    selectedAnswers[i] = true;
                }
            }
        }
        StateHasChanged();
    }

    private void AnswerQuestion()
    {
        if (correctlyQuestion == null) return;

        bool answeredCorrectly = true;
        for (int i = 0; i < correctlyQuestion.CorrectAnswer.Length; i++)
        {
            if (!selectedAnswers[correctlyQuestion.CorrectAnswer[i] - 1])
            {
                answeredCorrectly = false;
                break;
            }
        }
        this.answeredCorrectly.Add(answeredCorrectly);
        OpenNextQuestion(false);
    }

    private void SkipQuestion()
    {
        answeredCorrectly.Add(null);
        OpenNextQuestion(true);
    }

    private async void OpenNextQuestion(bool asyncReload)
    {
        timer.Stop();
        correctlyQuestionAnswering++;
        if (questions.Count <= correctlyQuestionAnswering)
        {
            await OpenSummery();
            return;
        }

        correctlyQuestion = questions[correctlyQuestionAnswering];
        pageTitle = correctlyQuestion.Title;
        selectedAnswers = new bool[correctlyQuestion.PossibleAnswers.Length];

        int timeToAddFromSec = int.Parse(correctlyQuestion.Time.ToString());

        int addTimeHours = timeToAddFromSec / 3600;
        int addTimeMin = (timeToAddFromSec - (3600 * addTimeHours)) / 60;
        int addTimeSec = timeToAddFromSec - (3600 * addTimeHours + 60 * addTimeMin);

        currentTime = new(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, addTimeHours, addTimeMin, addTimeSec);

        timer.Start();
        if (asyncReload)
        {
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            StateHasChanged();
        }
    }

    private void OnTimedEvent(object? sender, ElapsedEventArgs e)
    {
        // Update the current time
        currentTime = currentTime.AddSeconds(-1);

        if (currentTime.TimeOfDay.TotalSeconds <= 0)
        {
            SkipQuestion();
        }
        else
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task OpenSummery()
    {
        if (Http == null) return;
        if (jWTokenHandler == null) return;
        if (quiz == null)
        {
            NavigationManager.NavigateTo("/home");
            return;
        }

        StateHasChanged();

        loading?.Start();
        string jwt = await jWTokenHandler.GetToken();
        int userID = await sessionStorage.GetItemAsync<int>("userID");

        (HttpStatusCode statusCodeDifficulties, List<DifficultyDTO>? difficulties) =
                await HttpHandler.GetAsync<List<DifficultyDTO>>(
                    $"/api/Difficulties", jwt, Http);
        if (statusCodeDifficulties != HttpStatusCode.OK)
        {
            NavigationManager.NavigateTo("/home");
            return;
        }

        DifficultyDTO? quizDifficulty = difficulties?.FirstOrDefault(d => quiz.Difficulty == d.Difficulty);
        if (quizDifficulty == null)
        {
            NavigationManager.NavigateTo("/home");
            return;
        }

        for (int i = 0; i < questions.Count; i++)
        {
            if (answeredCorrectly[i] ?? false)
            {
                DifficultyDTO? questionDifficulty = difficulties?
                    .FirstOrDefault(d => questions[i].Difficulty == d.Difficulty);

                if (questionDifficulty == null)
                {
                    // Gets default
                    pointsGained += 100;
                    continue;
                }

                int difference = questionDifficulty.ID - quizDifficulty.ID;
                int difficultyAddition = (1 + difference / 10);
                pointsGained += 100 * difficultyAddition;
            }
        }

        StateHasChanged();

        await HandleRedraw();

        string userRole = await sessionStorage.GetItemAsync<string>("userRole");
        if (userRole == "Teacher")
        {
            loading?.Stop();
            return;
        }

        User_QuizDTO updateUserQuiz = new()
            {
                Completed = true,
                QuizID = quizID,
                UserID = userID,
                Results = pointsGained,
                TimeUsed = 0,
            };

        HttpStatusCode statusCodeUserQuiz =
           await HttpHandler.PutAsync(
                   $"/api/User_Quiz", updateUserQuiz, jwt, Http);

        if (statusCodeUserQuiz != HttpStatusCode.OK && statusCodeUserQuiz != HttpStatusCode.NoContent)
        {
            throw new Exception();
        }

        loading?.Stop();
    }

    private async Task HandleRedraw()
    {
        await lineChart.Clear();

        await lineChart.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDataset());
    }

    private LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
            {
                Label = "# of randoms",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone",
            };
    }

}
