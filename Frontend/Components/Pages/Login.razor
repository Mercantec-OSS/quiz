@page "/"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@namespace Login

@using Microsoft.AspNetCore.WebUtilities
@using API.Models
@using Frontend.Components.Layout

<PageTitle>Login</PageTitle>

<div class="login-container">
    <h1>Login</h1>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="text-danger">@ErrorMessage</p>
    }

    <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">


        <div class="form-group p-1">
            <InputText placeholder="Enter your Username" class="form-control"
                       @bind-Value="loginRequest.email" @oninput="ClearErrorMessage" />
        </div>

        <div class="form-group p-1">
            <InputText placeholder="Enter your password" class="form-control" type="password"
                       @bind-Value="loginRequest.password" @oninput="ClearErrorMessage" />
        </div>

        <div class="form-group d-flex justify-content-center p-1">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </EditForm>
</div>

@if (isLoading)
{
    <div class="spinner-container">
        <div class="spinner"></div>
    </div>
}

@code {
    private LoginModel loginRequest = new();
    private bool isLoading = false;
    private string ErrorMessage = string.Empty;
    [Inject] public HttpClient? Http { get; set; }

    // Method to handle login
    private async Task HandleLogin()
    {
        if (CheckRequirements())
        {
            ErrorMessage = "No username or password.";
            return;
        }

        isLoading = true;
        try
        {
            if (Http == null) return;

            LoginRequest request = new()
                {
                    email = loginRequest.email,
                    password = loginRequest.password
                };

            // Send POST request to login endpoint
            var response = await Http.PostAsJsonAsync("/api/Users/login", request);

            // Read response content
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                UserDTO? dTO = HttpHandler.Deserialize<UserDTO>(responseContent);
                if (dTO == null)
                    return;

                await sessionStorage.SetItemAsync("jwt", dTO.token);
                await sessionStorage.SetItemAsync("userRole", dTO.role);
                await sessionStorage.SetItemAsync("userEmail", dTO.email);
                await sessionStorage.SetItemAsync("userUsername", dTO.username);
                await sessionStorage.SetItemAsync("userID", dTO.ID);

                MainLayout.jwtToken = dTO.token ?? "";
                MainLayout.userRole = dTO.role;

                //navigate to home when email/username and password is correct
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                // If login fails
                ErrorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            // Handling any exceptions
            ErrorMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ClearErrorMessage()
    {
        if (CheckRequirements())
        {
            ErrorMessage = string.Empty;
        }
    }

    private bool CheckRequirements()
    {
        return string.IsNullOrEmpty(loginRequest.email) ||
            string.IsNullOrEmpty(loginRequest.password);
    }

    private class LoginModel
    {
        public string email { get; set; } = string.Empty;
        public string password { get; set; } = string.Empty;
    }
}

