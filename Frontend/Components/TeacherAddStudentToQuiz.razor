<JWTokenHandler @ref="jWTokenHandler" />
<LoadingSpinner @ref="loading" />

<Modal @ref="modal">
    <ModalContent Size="ModalSize.Fullscreen" Scrollable>
        <ModalHeader>
            <ModalTitle>@quiz.Title</ModalTitle>
            <CloseButton Clicked="Close" />
        </ModalHeader>
        <ModalBody>
            @if (students == null)
            {
                <Div>Loading...</Div>
            }
            else
            {
                @if (students.Count <= 0)
                {
                    <Div>No students found assigned to this quiz</Div>
                }
                else
                {
                    <Row HorizontalGutter="10" VerticalGutter="10">
                        @foreach (var user in students)
                        {
                            <Column ColumnSize="ColumnSize.Is6">
                                <Card>
                                    <CardHeader>
                                        @user.Key.username
                                    </CardHeader>
                                    <CardBody>
                                        <Row>
                                            <Column ColumnSize="ColumnSize.Is6">
                                                <p class="card-text">Email: @user.Key.email</p>
                                            </Column>
                                            <Column ColumnSize="ColumnSize.Is2">
                                                <Switch TValue="bool"
                                                CheckedChanged="Value => OnChanged(Value, user.Key)">Add</Switch>
                                            </Column>
                                        </Row>
                                    </CardBody>
                                </Card>
                            </Column>
                        }
                    </Row>
                }
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="Close">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Inject] public HttpClient? Http { get; set; }
    private JWTokenHandler? jWTokenHandler;
    private LoadingSpinner? loading;
    private Modal? modal;

    private QuizDTO quiz = new();
    private Dictionary<UserDTO, bool>? students = null;

    private Action<QuizDTO>? action;

    public async void Open(QuizDTO quiz, Action<QuizDTO> action)
    {
        if (Http == null) return;
        if (jWTokenHandler == null) return;

        string jwt = await jWTokenHandler.GetToken();
        this.action = action;
        this.quiz = quiz;
        loading?.Start();
        modal?.Show();

        (HttpStatusCode statusCode, List<UserDTO>? response) =
           await HttpHandler.GetAsync<List<UserDTO>>(
               $"/api/Users", jwt, Http);

        if (statusCode == HttpStatusCode.OK)
        {
            students = response?.ToDictionary(res => res, res => false);
            StateHasChanged();
        }

        loading?.Stop();
    }

    private void Close()
    {
        students = null;
        modal?.Hide();
        action?.Invoke(quiz);
    }

    private void OnChanged(bool value, UserDTO user)
    {
        if (students?.TryGetValue(user, out bool v) ?? false)
        {
            students[user] = value;
        }
    }

    private async void AddStudents()
    {
        if (Http == null) return;
        if (jWTokenHandler == null) return;

        string jwt = await jWTokenHandler.GetToken();
        loading?.Start();

        return;

        (HttpStatusCode statusCode, List<UserDTO>? response) =
           await HttpHandler.GetAsync<List<UserDTO>>(
               $"/api/User/", jwt, Http);

        if (statusCode == HttpStatusCode.OK)
        {
            // idk
        }

        loading?.Stop();
    }
}
