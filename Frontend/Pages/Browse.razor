@page "/browse"

@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.WebUtilities;
@using System.Collections.Generic

<JWTokenHandler @ref="jWTokenHandler" />
<PageTitle>Browse</PageTitle>

<Row>
    <Column ColumnSize="ColumnSize.Is2">
        <h2>Browse</h2>
    </Column>

    <Column Class="mx-1" ColumnSize="ColumnSize.Is2">
        <Dropdown Display="Display.InlineBlock">
            <DropdownToggle Color="Color.Primary">
                @(selectedCreator == null ? "Filter by creators" : selectedCreator)
            </DropdownToggle>
            <DropdownMenu MaxMenuHeight="100px">
                <DropdownItem Clicked="() => SelectCreator(null)">Remove filter</DropdownItem>
                <DropdownDivider />
                @foreach (string creator in creators)
                {
                    <DropdownItem Clicked="() => SelectCreator(creator)">
                        @creator
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </Column>

    <Column Class="mx-1" ColumnSize="ColumnSize.Is2">
        <Dropdown Display="Display.InlineBlock">
            <DropdownToggle Color="Color.Primary">
                @(selectedCategory == null ? "Filter by categori" : selectedCategory)
            </DropdownToggle>
            <DropdownMenu MaxMenuHeight="100px">
                <DropdownItem Clicked="() => SelectCategory(null)">Remove filter</DropdownItem>
                <DropdownDivider />
                @foreach (string category in categories)
                {
                    <DropdownItem Clicked="() => SelectCategory(category)">
                        @category
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </Column>

    <Column Class="mx-1" ColumnSize="ColumnSize.Is2">
        <Dropdown Display="Display.InlineBlock">
            <DropdownToggle Color="Color.Primary">
                @(selectedDifficulty == null ? "Filter by difficulty" : selectedDifficulty)
            </DropdownToggle>
            <DropdownMenu MaxMenuHeight="100px">
                <DropdownItem Clicked="() => SelectDifficulty(null)">Remove filter</DropdownItem>
                <DropdownDivider />
                @foreach (string difficulty in difficulties)
                {
                    <DropdownItem Clicked="() => SelectDifficulty(difficulty)">
                        @difficulty
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </Column>
</Row>

<GenericListComponent T="QuizDTO" Items="Sort()" NoItemsText="Loading...">
    <BodyContent>
        <Column ColumnSize="ColumnSize.Is4">
            <Card>
                <CardHeader>
                    <strong>@context.Title</strong>
                </CardHeader>
                <CardBody>
                    <Row>
                        <Column>
                            Category: @context.Category
                        </Column>
                        <Column>
                            Difficulty: @context.Difficulty
                        </Column>
                        <Column>
                            Questions: @context.QestionsAmount
                        </Column>
                    </Row>
                </CardBody>
                <CardFooter>
                    <Button Color="Color.Primary" Style="width: 100%"
                    Clicked="() => StartQuiz(context.ID ?? 0)">
                        @(context.Creator == username ? "Try quiz" : "Start")
                    </Button>
                </CardFooter>
            </Card>
        </Column>
    </BodyContent>
</GenericListComponent>

@code {
    [CascadingParameter(Name = "HttpHandler")]
    private HttpHandler? httpHandler { get; set; }

    [CascadingParameter(Name = "JWTokenHandler")]
    private JWTokenHandler? jWTokenHandler { get; set; }

    [CascadingParameter(Name = "LoadingSpinner")]
    private LoadingSpinner? loading { get; set; }

    [CascadingParameter(Name = "SessionStorageHandler")]
    private SessionStorageHandler? sessionStorageHandler { get; set; }

    [Inject] public HttpClient? Http { get; set; }

    private List<QuizDTO> allQuizzes = new();
    private List<string> creators = new();
    private List<string> categories = new();
    private List<string> difficulties = new();

    private string username = string.Empty;
    private string? selectedCategory;
    private string? selectedCreator;
    private string? selectedDifficulty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Http == null || httpHandler == null) return;
            if (jWTokenHandler == null) return;
            if (sessionStorageHandler == null) return;

            string jwt = await jWTokenHandler.GetToken();
            string searchWord = "";
            loading?.Start();

            Uri? uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var dataValue))
            {
                searchWord = dataValue.ToArray()[0] ?? "";
            }
            HttpStatusCode statusCode;
            List<QuizDTO>? quizes;
            string userRole = await sessionStorageHandler.GetItem<string>(SessionStorageHandler.Item.userRole);
            if (userRole == "Guest")
            {
                (statusCode, QuizDTO? quiz) = await httpHandler.GetAsync<QuizDTO>(
                        $"/api/Quizs/39", jwt, Http);

                quizes = new();
                if (statusCode == HttpStatusCode.OK && quiz != null)
                {
                    quizes.Add(quiz);
                }
            }
            else
            {
                Dictionary<string, string> parameters = new() { { "searchWord", searchWord } };

                (statusCode, quizes) = await httpHandler.GetAsync<List<QuizDTO>>(
                        $"/api/Quizs/QuizSearch", parameters, jwt, Http);
            }

            if (statusCode == HttpStatusCode.OK && sessionStorageHandler != null)
            {
                username = await sessionStorageHandler.GetItem<string>(SessionStorageHandler.Item.userUsername);
                allQuizzes = quizes ?? new();
                Dictionary<string, int> creators = new();
                Dictionary<string, int> categories = new();
                Dictionary<string, int> difficulty = new();
                foreach (QuizDTO item in allQuizzes)
                {
                    if (!creators.TryAdd(item.Creator, 1))
                    {
                        creators[item.Creator]++;
                    }
                    if (!categories.TryAdd(item.Category, 1))
                    {
                        categories[item.Category]++;
                    }
                    if (!difficulty.TryAdd(item.Difficulty, 1))
                    {
                        difficulty[item.Difficulty]++;
                    }
                }

                this.creators = creators.Keys.ToList();
                this.categories = categories.Keys.ToList();
                this.difficulties = difficulty.Keys.ToList();
            }

            loading?.Stop();
            StateHasChanged();
        }
    }

    private void SelectCreator(string? creator) => selectedCreator = creator;
    private void SelectCategory(string? category) => selectedCategory = category;
    private void SelectDifficulty(string? difficult) => selectedDifficulty = difficult;

    private List<QuizDTO> Sort()
    {
        List<QuizDTO> quizzes = new();
        foreach (QuizDTO item in allQuizzes)
        {
            if (!string.IsNullOrEmpty(selectedCreator))
            {
                if (item.Creator != selectedCreator)
                {
                    continue;
                }
            }

            if (!string.IsNullOrEmpty(selectedCategory))
            {
                if (item.Category != selectedCategory)
                {
                    continue;
                }
            }

            if (!string.IsNullOrEmpty(selectedDifficulty))
            {
                if (item.Difficulty != selectedDifficulty)
                {
                    continue;
                }
            }

            quizzes.Add(item);
        }

        return quizzes;
    }

    private void StartQuiz(int quizID)
    {
        if (quizID == 0)
        {
            return;
        }

        NavigationManager.NavigateTo($"/quiz_ui?quiz_id={Uri.EscapeDataString(quizID.ToString())}");
    }
}
