@page "/TeacherMyPage"
@rendermode InteractiveServer
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@using API.Models
@using System.Net

<PageTitle>My page</PageTitle>

<h3>My Page</h3>

@if (quizzesMaked.Count <= 0)
{
    <p>
        Loading...
    </p>
}
else
{
    <div class="row my-1">
        @foreach (User_QuizInfoDTO quiz in quizzesMaked)
        {
            <div class="col-md-6 p-1">
                <div class="card bg-light">
                    <div class="card-body">
                        <div class="Split">
                            <h3 class="card-title">@quiz.quiz.Title</h3>
                            <h4 class="text-end">Creator: @quiz.quiz.Creator</h4>
                        </div>
                        <div class="MyPageCardGab">
                            <div class="MyPageCustomBox">
                                <p class="card-text">Category: @quiz.quiz.Category</p>
                            </div>
                            <div class="MyPageCustomBox">
                                <p class="card-text">Difficulty: @quiz.quiz.Difficulty</p>
                            </div>
                            <div class="MyPageCustomBox">
                                <p class="card-text">Score: 0</p>
                            </div>
                        </div>
                        @* <div class="pt-2 MyPageCardGab">
                            <div class="MyPageCustomBox">
                                <p class="card-text">Time: @quiz.Timer</p>
                            </div>
                            <div class="MyPageCustomBox">
                                <p class="card-text">Time used: @quiz.Timer</p>
                            </div>
                        </div> *@
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Inject] public HttpClient? Http { get; set; }
    private List<User_QuizInfoDTO> quizzesMaked = new();

    protected override async Task OnInitializedAsync()
    {
        if (Http == null) return;
        try
        {
            int id = await sessionStorage.GetItemAsync<int>("userID");
            string jwt = await sessionStorage.GetItemAsStringAsync("jwtToken");

            (HttpStatusCode statusCode, List<User_QuizInfoDTO>? response) =
                await HttpHandler.GetAsync<List<User_QuizInfoDTO>>(
                    $"api/User_Quiz/AllUserQuiz/{id}", jwt, Http);

            if (statusCode == HttpStatusCode.OK)
            {
                quizzesMaked = response ?? new();
            }
        }
        catch (InvalidOperationException)
        {
            // It fails the first time,
            // therefore I need this.
        }
    }
}
