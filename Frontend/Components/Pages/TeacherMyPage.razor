@page "/TeacherMyPage"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@using API.Models
@using System.Net

<PageTitle>My page</PageTitle>

<h3>My Page</h3>

@if (quizzesMaked.Count <= 0)
{
    <p>
        Loading...
    </p>
}
else
{
    <div class="row my-1">
        @foreach (QuizDTO quiz in quizzesMaked)
        {
            <div class="col-md-6 p-1" @onclick="() => ToggleQuizModal(quiz)">
                <div class="card bg-light">
                    <div class="card-body">
                        <h3 class="card-title">@quiz.Title</h3>
                        <div class="MyPageCardGab">
                            <div class="MyPageCustomBox" @onclick:stopPropagation>
                                <p class="card-text">Category: @quiz.Category</p>
                            </div>
                            <div class="MyPageCustomBox" @onclick:stopPropagation>
                                <p class="card-text">Difficulty: @quiz.Difficulty</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (quizOpenInModal != null)
{
    <div class="model custom-modal custom-modal-teacherSeesStudent">
        <div class="Split">
            <h4>@quizOpenInModal.Title</h4>
            <button class="btn btn-outline-secondary" @onclick="() => ToggleQuizModal()">Close</button>
        </div>

        @if (usersToQuizModal == null)
        {
            <div>Loading...</div>
        }
        else
        {
            @if (usersToQuizModal.Count <= 0)
            {
                <div>No students found assigned to this quiz</div>
            }
            else
            {
                <div class="row my-1 scrollable-content">
                    @foreach (User_QuizUserInfoDTO userQuiz in usersToQuizModal)
                    {
                        <div class="col-md-4 p-1">
                            <div class="card">
                                <div class="card-body">
                                    <h3 class="card-title">@userQuiz.User.username</h3>
                                    <div class="MyPageCardGab">
                                        <div class="MyPageCustomBox">
                                            <p class="card-text">Email: @userQuiz.User.email</p>
                                        </div>
                                        <div class="MyPageCustomBox">
                                            <p class="card-text">Score: @userQuiz.Results</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        }
    </div>

    <!-- Modal overlay (transparent background) -->
    <div @onclick="() => ToggleQuizModal()" class="modal-overlay"></div>
}

@if (isLoading)
{
    <div class="spinner-container">
        <div class="spinner"></div>
    </div>
}

@code {
    [Inject] public HttpClient? Http { get; set; }
    private List<QuizDTO> quizzesMaked = new();

    private QuizDTO? quizOpenInModal = null;
    private List<User_QuizUserInfoDTO>? usersToQuizModal = null;

    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string jwt = await sessionStorage.GetItemAsync<string>("jwt");
            if (string.IsNullOrEmpty(jwt))
            {
                NavigationManager.NavigateTo("/");
            }

            if (Http == null) return;
            int id = await sessionStorage.GetItemAsync<int>("userID");

            isLoading = true;
            StateHasChanged();

            (HttpStatusCode statusCode, List<QuizDTO>? response) =
                await HttpHandler.GetAsync<List<QuizDTO>>(
                    $"/api/Quizs/ByCreater/{id}", jwt, Http);

            if (statusCode == HttpStatusCode.OK)
            {
                quizzesMaked = response ?? new();
            }
        }
        catch (InvalidOperationException)
        {
            // It fails the first time,
            // therefore I need this.
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ToggleQuizModal(QuizDTO? quiz = null)
    {
        usersToQuizModal = null;
        quizOpenInModal = quiz;

        if (quiz != null && Http != null)
        {
            isLoading = true;
            string jwt = await sessionStorage.GetItemAsync<string>("jwt");

            (HttpStatusCode statusCode, List<User_QuizUserInfoDTO>? response) =
               await HttpHandler.GetAsync<List<User_QuizUserInfoDTO>>(
                   $"/api/User_Quiz/AllStudents/{quiz.ID}", jwt, Http);

            if (statusCode == HttpStatusCode.OK)
            {
                usersToQuizModal = response ?? new();
            }

            isLoading = false;
        }
    }
}
