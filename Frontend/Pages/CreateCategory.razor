@page "/createCategory"
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>Create Kategori</PageTitle>

<div style="display: flex; align-items: center; flex-direction: column;">
    <h1>Create Kategori</h1>

    <div style="display: flex; flex-wrap: wrap; gap: 10px; align-items: center;">
        <Dropdown Display="Display.InlineBlock">
            <DropdownToggle Color="Color.Primary">
                @(selectedCategory == null ? "Vælg Kategori" : selectedCategory.Category)
            </DropdownToggle>
            <DropdownMenu MaxMenuHeight="100px">
                <DropdownItem>
                    <input type="text" class="form-control" placeholder="Search"
                           @oninput="SearchWordChange"
                           @bind="searchWord" />
                </DropdownItem>
                <DropdownDivider />
                @foreach (CategoriesDTO category in searchWord == string.Empty ?
                categories : categories.Where(c =>
                c.Category.ToLower().Contains(searchWord.ToLower())))
                {
                    @if (category != selectedCategory)
                    {
                        <DropdownItem Clicked="() => SelectCategory(category)">
                            @category.Category
                        </DropdownItem>
                    }
                }
            </DropdownMenu>
        </Dropdown>

        <button class="btn btn-warning" @onclick="() => ToggleEditCategoryModal(selectedCategory)" disabled="@(selectedCategory == null)">
            Edit Kategori
        </button>

        <button class="btn btn-success" @onclick="OpenModalAddNewCategory">
            Add Kategori
        </button>
    </div>
</div>

<Table Striped Resizable ResizeMode="TableResizeMode.Columns">
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Under Category</TableHeaderCell>
            <TableHeaderCell>Edit</TableHeaderCell>
            <TableHeaderCell>Delete</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (UnderCategoriesGetDTO underCategory in underCategories)
        {
            <TableRow>
                <TableRowCell>@underCategory.UnderCategory</TableRowCell>
                <TableRowCell>
                    <button class="btn btn-warning"
                            @onclick="() => ToggleEditUnderCategoryModal(underCategory)">
                        Edit
                    </button>
                </TableRowCell>
                <TableRowCell>
                    <button class="btn btn-danger"
                            @onclick="() => ToggleDeleteConfirmation(underCategory)">
                        Delete
                    </button>
                </TableRowCell>
            </TableRow>
        }
        @if (selectedCategory != null)
        {
            <TableRow>
                <TableRowCell>
                    <button class="btn btn-primary" @onclick="OpenModalAddNewUnderCategory">
                        Add New Under Category
                    </button>
                </TableRowCell>
                <TableRowCell></TableRowCell>
                <TableRowCell></TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

<Modal @ref="modalAddNewCategory">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add new category</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <TextEdit @bind-Text="newCategory" Placeholder="Enter category..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => CloseModal(modalAddNewCategory)">Close</Button>
            <Button Color="Color.Primary" Clicked="AddNewCategory">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalAddNewUnderCategory">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add new under category</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <TextEdit @bind-Text="newUnderCategory" Placeholder="Enter under category..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => CloseModal(modalAddNewUnderCategory)">Close</Button>
            <Button Color="Color.Primary" Clicked="AddNewUnderCategory">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalEditCategory">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit category</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <TextEdit @bind-Text="editCategoryText" Placeholder="Enter category..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => CloseModal(modalEditCategory)">Close</Button>
            <Button Color="Color.Primary" Clicked="SaveEditedCategory">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalEditUnderCategory">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit under category</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <TextEdit @bind-Text="editUnderCategoryText" Placeholder="Enter under category..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => CloseModal(modalEditUnderCategory)">Close</Button>
            <Button Color="Color.Primary" Clicked="SaveEditedUnderCategory">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalDeleteConfirmation">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Are you sure you want to  delete this under kategori?</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            You can't undo this action.
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => CloseModal(modalDeleteConfirmation)">Cancel</Button>
            <Button Color="Color.Primary" Clicked="DeleteConfirmed">Delete</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalErrorHappened">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>An error happened</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => CloseModal(modalErrorHappened)">Ok</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@if (isLoading)
{
    <div class="spinner-container">
        <div class="spinner"></div>
    </div>
}

@code {
    [Inject] public HttpClient? Http { get; set; }

    private CategoriesDTO? selectedCategory = null;
    private List<CategoriesDTO> categories = new();
    private List<UnderCategoriesGetDTO> underCategories = new();

    private string newCategory = string.Empty;
    private string newUnderCategory = string.Empty;

    private string editCategoryText = string.Empty;
    private CategoriesDTO? editCategory = null;

    private string editUnderCategoryText = string.Empty;
    private UnderCategoriesGetDTO? editUnderCategory = null;

    private UnderCategoriesGetDTO? underCategoryToBeDeleted = null;

    private string searchWord = string.Empty;
    private bool isLoading = false;
    private Modal? modalErrorHappened;

    private Modal? modalAddNewCategory;
    private Modal? modalAddNewUnderCategory;
    private Modal? modalEditCategory;
    private Modal? modalEditUnderCategory;
    private Modal? modalDeleteConfirmation;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string jwt = await sessionStorage.GetItemAsync<string>("jwt");
            if (string.IsNullOrEmpty(jwt))
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            if (Http == null) return;
            isLoading = true;
            StateHasChanged();


            (HttpStatusCode statusCode, List<CategoriesDTO>? response) =
                await HttpHandler.GetAsync<List<CategoriesDTO>>("api/Categories", jwt, Http);

            if (statusCode == HttpStatusCode.OK)
            {
                categories = response ?? new();
            }
            else
            {
                modalErrorHappened?.Show();
            }

            isLoading = false;
            StateHasChanged();
        }
    }

    private void SearchWordChange(ChangeEventArgs e)
    {
        searchWord = e.Value?.ToString() ?? string.Empty;
    }

    private void CloseModal(Modal? modal) => modal?.Hide();

    private void OpenModalAddNewCategory()
    {
        newCategory = string.Empty;
        modalAddNewCategory?.Show();
    }

    private void OpenModalAddNewUnderCategory()
    {
        newUnderCategory = string.Empty;
        modalAddNewUnderCategory?.Show();
    }

    private void ToggleDeleteConfirmation(UnderCategoriesGetDTO? underCategory = null)
    {
        underCategoryToBeDeleted = underCategory;
        if (underCategoryToBeDeleted == null)
        {
            modalDeleteConfirmation?.Hide();
            return;
        }
        modalDeleteConfirmation?.Show();
    }

    private void ToggleEditCategoryModal(CategoriesDTO? category = null)
    {
        editCategory = category;
        editCategoryText = editCategory != null
            ? editCategory.Category : string.Empty;

        if (editCategory == null)
        {
            modalEditCategory?.Hide();
            return;
        }
        modalEditCategory?.Show();
    }

    private void ToggleEditUnderCategoryModal(UnderCategoriesGetDTO? underCategory = null)
    {
        editUnderCategory = underCategory;
        editUnderCategoryText = editUnderCategory != null
            ? editUnderCategory.UnderCategory : string.Empty;

        if (editUnderCategory == null)
        {
            modalEditUnderCategory?.Hide();
            return;
        }
        modalEditUnderCategory?.Show();
    }

    private async Task SelectCategory(CategoriesDTO category)
    {
        selectedCategory = category;

        if (Http == null) return;
        isLoading = true;
        string jwt = await sessionStorage.GetItemAsync<string>("jwt");

        (HttpStatusCode statusCode, List<UnderCategoriesGetDTO>? response) =
                await HttpHandler.GetAsync<List<UnderCategoriesGetDTO>>(
                    $"api/UnderCategories/CategoryID/{category.ID}", jwt, Http);

        if (statusCode == HttpStatusCode.OK)
        {
            underCategories = response ?? new();
        }
        else
        {
            modalErrorHappened?.Show();
        }

        isLoading = false;
    }

    private async Task SaveEditedCategory()
    {
        if (Http == null || this.editCategory == null)
        {
            ToggleEditCategoryModal();
            return;
        }

        isLoading = true;
        StateHasChanged();
        string jwt = await sessionStorage.GetItemAsync<string>("jwt");

        CategoriesDTO editCategory = new()
            {
                ID = this.editCategory.ID,
                Category = editCategoryText,
                EducationID = this.editCategory.EducationID
            };

        (HttpStatusCode statusCode, CategoriesDTO? response) =
           await HttpHandler.PutAsync<CategoriesDTO>(
               $"/api/Categories/{editCategory.ID}", editCategory, jwt, Http);

        if (statusCode == HttpStatusCode.OK)
        {
            this.editCategory.Category = editCategoryText;
        }
        else
        {
            modalErrorHappened?.Show();
        }

        ToggleEditCategoryModal();
        isLoading = false;
        StateHasChanged();
    }

    private async Task SaveEditedUnderCategory()
    {
        if (Http == null || editUnderCategory == null)
        {
            ToggleEditUnderCategoryModal();
            return;
        }

        isLoading = true;
        string jwt = await sessionStorage.GetItemAsync<string>("jwt");
        editUnderCategory.UnderCategory = editUnderCategoryText;

        HttpStatusCode statusCode =
           await HttpHandler.PutAsync(
               $"/api/UnderCategories/{editUnderCategory.ID}", editUnderCategory, jwt, Http);

        if (statusCode != HttpStatusCode.OK)
        {
            modalErrorHappened?.Show();
        }

        ToggleEditUnderCategoryModal();
        isLoading = false;
    }

    private async Task DeleteConfirmed()
    {
        if (Http == null || underCategoryToBeDeleted == null)
            return;

        isLoading = true;
        string jwt = await sessionStorage.GetItemAsync<string>("jwt");
        HttpStatusCode statusCode = await HttpHandler.DeleteAsync(
                    $"/api/UnderCategories/{underCategoryToBeDeleted.ID}", jwt, Http);

        if (statusCode == HttpStatusCode.NoContent)
        {
            underCategories.Remove(underCategoryToBeDeleted);
        }
        else
        {
            modalErrorHappened?.Show();
        }

        ToggleDeleteConfirmation();
        isLoading = false;
    }

    private async Task AddNewCategory()
    {
        CloseModal(modalAddNewCategory);
        string newCategoryText = this.newCategory;
        this.newCategory = string.Empty;

        if (Http == null) return;
        isLoading = true;
        string jwt = await sessionStorage.GetItemAsync<string>("jwt");

        CategoryCreateDTO newCategory = new()
            {
                Category = newCategoryText,
                EducationID = 1,
            };

        (HttpStatusCode statusCode, CategoriesDTO? response) =
           await HttpHandler.PostAsync<CategoriesDTO>(
               $"api/Categories", newCategory, jwt, Http);

        if (statusCode == HttpStatusCode.Created && response != null)
        {
            CategoriesDTO newCategoryFromDB = new()
                {
                    ID = response.ID,
                    Category = response.Category,
                    EducationID = response.EducationID
                };

            selectedCategory = newCategoryFromDB;
            categories.Add(newCategoryFromDB);
            underCategories.Clear();
        }
        else
        {
            modalErrorHappened?.Show();
        }

        isLoading = false;
    }

    private async Task AddNewUnderCategory()
    {
        CloseModal(modalAddNewUnderCategory);
        string newUnderCategory = this.newUnderCategory;
        this.newUnderCategory = string.Empty;

        if (selectedCategory == null) return;
        if (Http == null) return;
        isLoading = true;
        string jwt = await sessionStorage.GetItemAsync<string>("jwt");

        UnderCategoriesCreateDTO newUnderCategories = new()
            {
                UnderCategory = newUnderCategory,
                CategoryID = selectedCategory.ID
            };

        (HttpStatusCode statusCode, UnderCategoriesGetDTO? response) =
                await HttpHandler.PostAsync<UnderCategoriesGetDTO>(
                    $"api/UnderCategories", newUnderCategories, jwt, Http);

        if (statusCode == HttpStatusCode.Created && response != null)
        {
            underCategories.Add(response);
        }
        else
        {
            modalErrorHappened?.Show();
        }

        isLoading = false;
    }
}
