@page "/create"
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>Create</PageTitle>

<div>
    @foreach (var question in questionsHandler)
    {
        <div>
            <h5>Spørgsmål @((questionsHandler.IndexOf(question) + 1))</h5>


            <input type="text" placeholder="Skriv spørgsmål" @bind="question.questionModel.QuestionText"> <br> <br>


            @* simple drop down menu, very  important *@
            <div class="drop-menu">

                <table>
                    <tr>
                        <td>
                            <div class="dropdown-categories">
                                <button class="btn btn-primary dropdown-toggle" @onclick="() => ToggleDropdownCategory (question)">
                                    @(question.selectedCategory == null ? "Vælg Kategori" : question.selectedCategory.Category)
                                </button>
                                <div class="dropdown-menu scrollable-dropdown @question.dropdownCategory">
                                    @foreach (CategoryDTO category in categories)
                                    {
                                        <a class="dropdown-item" @onclick="() => SelectCategory(category, question)">@category.Category</a>
                                    }
                                </div>
                            </div>
                        </td>
                        <td>

                            <div class="dropdown-underCategories">
                                <button class="btn btn-primary dropdown-toggle" @onclick="() => ToggleDropdownUnderCategory (question)">
                                    @(question.selectedUnderCategory == null ? "Vælg Underkategori" : question.selectedUnderCategory.UnderCategory)
                                </button>
                                <div class="dropdown-menu scrollable-dropdown @question.dropdownUnderCategory">
                                    @foreach (UnderCategoryGetDTO underCategory in underCategories)
                                    {
                                        <a class="dropdown-item" @onclick="() => SelectUnderCategory(underCategory, question)">@underCategory.UnderCategory</a>
                                    }
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="dropdown-difficulties">
                                <button class="btn btn-primary dropdown-toggle" @onclick="() => ToggleDropdownDifficulties (question)">
                                    @(question.selectedDifficulty == null ? "Vælg Niveau" : question.selectedDifficulty.Difficulty)
                                </button>
                                <div class="dropdown-menu scrollable-dropdown @question.dropdownDifficulty">
                                    @foreach (DifficultyDTO difficulty in difficulties)
                                    {
                                        <a class="dropdown-item" @onclick="() => SelectDifficulties(difficulty, question)">@difficulty.Difficulty</a>
                                    }
                                </div>
                            </div>
                        </td>
                        <td>
                            <label for="Time">Tid</label>
                            <input type="number" placeholder="Tid (sek)" @bind="question.questionModel.Time" min="10" step="5" style="width: 90px;">
                        </td>
                    </tr>
                </table>
            </div>
            @* end of dropdown menu  *@
            <br />



            <div class="answer-option">
                <input type="checkbox" @bind="question.questionModel.CorrectAnswers[0]" />
                <input type="text" placeholder="Valgmulighed 1" @bind="question.questionModel.Answer1" />

                <input type="checkbox" @bind="question.questionModel.CorrectAnswers[1]" />
                <input type="text" placeholder="Valgmulighed 2" @bind="question.questionModel.Answer2" />

                <input type="checkbox" @bind="question.questionModel.CorrectAnswers[2]" />
                <input type="text" placeholder="Valgmulighed 3" @bind="question.questionModel.Answer3" />

                <input type="checkbox" @bind="question.questionModel.CorrectAnswers[3]" />
                <input type="text" placeholder="Valmulighed 4" @bind="question.questionModel.Answer4" />

            </div> <br> <br>

            <button class="btn btn-danger" @onclick="() => DeleteQuestion(question)">Slet Spørgsmål</button>
        </div>
        <hr />
    }
</div>



<div>


    @if (questionsHandler.Count >= MaxQuestions)
    {
        <p style="color:red"> MAXIMUM ANTAL SPØRGSMÅL NÅET!!! (@MaxQuestions)</p>
    }

    <button class="btn btn-primary" @onclick="AddNewQuestion" disabled="@(questionsHandler.Count >= MaxQuestions)">Tilføj spørgsmål</button>

    <button class="btn btn-success" @onclick="SaveQuestions">Gem spørgsmål</button>

</div>

<br />

<div>
    <h3>Upload spørgsmål fra Excel</h3>
    <InputFile OnChange="UploadExcel" />
</div>


@if (createdQuestions)
{
    <div class="model custom-modal">
        <h4>Spørgsmål gemt succesfuldt</h4>
        <div class="m-1 Split">
            <button class="btn btn-outline-dark" @onclick="ToggleCreatedConfirmed">Close</button>
        </div>
    </div>

    <div @onclick="ToggleCreatedConfirmed" class="modal-overlay"></div>
}

<LoadingSpinner @ref="loading" />

@code {
    public class QuestionModel
    {
        public int Id { get; set; }
        public string QuestionText { get; set; }
        public string Categories { get; set; }
        public string UnderCategories { get; set; }
        public string Answer1 { get; set; }
        public string Answer2 { get; set; }
        public string Answer3 { get; set; }
        public string Answer4 { get; set; }
        public bool[] CorrectAnswers { get; set; } = new bool[4]; //New property for multiple correct answers
        public string Difficulties { get; set; }
        public bool QuestionStatus { get; set; }
        public int? Time { get; set; }
        public int User { get; set; }
        public string Picture { get; set; }
    }

    public class Question
    {
        public int QuestionId { get; set; }
        public string QuestionText { get; set; } = "";
        public string Answer1 { get; set; } = "";
        public string Answer2 { get; set; } = "";
        public string Answer3 { get; set; } = "";
        public string Answer4 { get; set; } = "";
    }

    private class QuestionHandling
    {
        public QuestionModel? questionModel;

        //public category dropdown
        public CategoryDTO? selectedCategory;
        public string dropdownCategory = "";

        //Public undercategory dropdown
        public UnderCategoryGetDTO? selectedUnderCategory;
        public string dropdownUnderCategory = "";

        //Public difficulty dropdown
        public DifficultyDTO? selectedDifficulty;
        public string dropdownDifficulty = "";
    }

    private List<DifficultyDTO> difficulties = new();
    private List<CategoryDTO> categories = new();
    private List<UnderCategoryGetDTO> underCategories = new();
    
    private bool createdQuestions = false;
    private LoadingSpinner? loading;

    private const int MaxQuestions = 25;
    // private int nextQuestionId = 1;
    private List<QuestionHandling> questionsHandler = new();

    [Inject] public HttpClient? Http { get; set; }

    //getting info from API/DB
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Http == null) return;

        if (firstRender)
        {
            string Jwt = await sessionStorage.GetItemAsync<string>("jwt");
            loading?.Start();

            (HttpStatusCode statusCodeDifficulties, List<DifficultyDTO>? getDifficulties) =
               await HttpHandler.GetAsync<List<DifficultyDTO>>("api/Difficulties", Jwt, Http);

            if (statusCodeDifficulties == HttpStatusCode.OK)
            {
                difficulties.AddRange(getDifficulties ?? new());
            }

            (HttpStatusCode statusCodeCategories, List<CategoryDTO>? getCategories) =
               await HttpHandler.GetAsync<List<CategoryDTO>>("api/Categories", Jwt, Http);

            if (statusCodeCategories == HttpStatusCode.OK)
            {
                categories.AddRange(getCategories ?? new());
            }

            (HttpStatusCode statusCodeUnderCategories, List<UnderCategoryGetDTO>? getUnderCategories) =
               await HttpHandler.GetAsync<List<UnderCategoryGetDTO>>("api/UnderCategories", Jwt, Http);

            if (statusCodeUnderCategories == HttpStatusCode.OK)
            {
                underCategories.AddRange(getUnderCategories ?? new());
            }

            loading?.Stop();
        }
    }


    private void ToggleCreatedConfirmed()
    {
        createdQuestions = !createdQuestions;
    }



    //method to add new question to the quiz
    private void AddNewQuestion()
    {
        if (questionsHandler.Count < MaxQuestions)
        {
            questionsHandler.Add(new()
                {
                    questionModel = new()
                });
        }
    }

    //method to check if an answer is selected
    private bool IsChecked(string selectedAnswer, string option)
    {
        return selectedAnswer == option;
    }

    // save questions to database, to save for other use
    private async Task SaveQuestions()
    {
        loading?.Start();

        foreach (QuestionHandling question in questionsHandler)
        {
            //error handeling
            if (question.selectedDifficulty == null)
            {
                //@ error message
                return;
            }

            if (question.selectedCategory == null)
            {
                //@ error message
                return;
            }

            if (question.selectedUnderCategory == null)
            {
                //@ error message
                return;
            }

            if (question.questionModel == null)
            {
                return;
            }

            if (question.questionModel.Time == null)
            {
                return;
            }



            var correctAnswerIds = question.questionModel?.CorrectAnswers
            .Select((isCorrect, index) => isCorrect ? index + 1 : (int?)null)
            .Where(id => id.HasValue)
            .Select(id => id.Value)
            .ToArray();

            var dto = new QuestionCreateDTO
                {
                    Title = question.questionModel.QuestionText,
                    Category = question.selectedCategory.ID,
                    UnderCategory = question.selectedUnderCategory.ID,
                    PossibleAnswers = new[] {
                     question.questionModel.Answer1, question.questionModel.Answer2, question.questionModel.Answer3, question.questionModel.Answer4 }, // Placeholder, replace with actual values
                    CorrectAnswer = correctAnswerIds,
                    Picture = "some_url",
                    Time = question.questionModel.Time ?? 0,
                    Difficulty = question.selectedDifficulty.ID,
                    QuestionStatus = true,
                    Creator = 1,
                };


            try
            {
                // Send the POST request
                var response = await Http.PostAsJsonAsync("https://mercantec-quiz.onrender.com/api/Questions", dto);

                // Check if the request was successful
                if (!response.IsSuccessStatusCode)
                {
                    // Log the status code and reason phrase in case of failure
                    Console.WriteLine($"Failed to save question '{dto.Title}': {response.StatusCode} - {response.ReasonPhrase}");
                }
            }
            catch (Exception ex)
            {
                // Log any exceptions that occur during the request
                Console.WriteLine($"Error saving question '{dto.Title}': {ex.Message}");
            }
        }
        questionsHandler.Clear();
        ToggleCreatedConfirmed();
        loading?.Stop();
    }



    //Helper method to map Selected answer
    private int ConvertAnswerToId(String selectedAnswer)
    {
        //this is a simple way
        switch (selectedAnswer)
        {
            case "option1": return 1;
            case "option2": return 2;
            case "option3": return 3;
            case "option4": return 4;
            default: return 0; //No Answer selected
        }
    }

    //simple drop down menu category
    // Toggle the visibility of the dropdown menu
    private void ToggleDropdownCategory(QuestionHandling categoryHandling)
    {
        categoryHandling.dropdownCategory = categoryHandling.dropdownCategory == "" ? "show" : "";
        categoryHandling.dropdownUnderCategory = "";
        categoryHandling.dropdownDifficulty = "";
    }

    // Set the selected item and close the dropdown
    private void SelectCategory(CategoryDTO item, QuestionHandling questionHandling)
    {
        questionHandling.selectedCategory = item;
        questionHandling.dropdownCategory = ""; // Hide the dropdown
    }


    //simple drop down menu for undercategory
    // Toggle the visibility of the dropdown menu
    private void ToggleDropdownUnderCategory(QuestionHandling questionHandling)
    {
        questionHandling.dropdownUnderCategory = questionHandling.dropdownUnderCategory == "" ? "show" : "";
        questionHandling.dropdownCategory = "";
        questionHandling.dropdownDifficulty = "";
    }

    // Set the selected item and close the dropdown
    private void SelectUnderCategory(UnderCategoryGetDTO item1, QuestionHandling underCategoryHandling)
    {
        underCategoryHandling.selectedUnderCategory = item1;
        underCategoryHandling.dropdownUnderCategory = ""; // Hide the dropdown
    }



    //simple drop down menu for difficulties
    // Toggle the visibility of the dropdown menu
    private void ToggleDropdownDifficulties(QuestionHandling difficultyHandling)
    {
        difficultyHandling.dropdownDifficulty = difficultyHandling.dropdownDifficulty == "" ? "show" : "";
        difficultyHandling.dropdownCategory = "";
        difficultyHandling.dropdownUnderCategory = "";
    }

    // Set the selected item and close the dropdown
    private void SelectDifficulties(DifficultyDTO difficulties, QuestionHandling difficultyHandling)
    {
        difficultyHandling.selectedDifficulty = difficulties;
        difficultyHandling.dropdownDifficulty = ""; // Hide the dropdown
    }

    //delete button
    private void DeleteQuestion(QuestionHandling questionHandling)
    {
        questionsHandler.Remove(questionHandling);
    }


    //uploading the excel file to the database
    private async Task UploadExcel(InputFileChangeEventArgs e)
    {
        //     try
        //     {
        //         // Set the license context
        //         ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        //         var file = e.File;

        //         if (file != null)
        //         {
        //             using (var stream = new MemoryStream())
        //             {
        //                 await file.OpenReadStream().CopyToAsync(stream);

        //                 using (var package = new OfficeOpenXml.ExcelPackage(stream))
        //                 {
        //                     var worksheet = package.Workbook.Worksheets[0]; // Get the first worksheet

        //                     var rowCount = worksheet.Dimension.Rows;

        //                     for (int row = 2; row <= rowCount; row++) // Assuming row 1 has headers
        //                     {
        //                         var question = new QuestionModel
        //                             {
        //                                 // Id = nextQuestionId++,
        //                                 QuestionText = worksheet.Cells[row, 1].Value?.ToString() ?? "",
        //                                 Answer1 = worksheet.Cells[row, 4].Value?.ToString() ?? "",
        //                                 Answer2 = worksheet.Cells[row, 5].Value?.ToString() ?? "",
        //                                 Answer3 = worksheet.Cells[row, 6].Value?.ToString() ?? "",
        //                                 Answer4 = worksheet.Cells[row, 7].Value?.ToString() ?? ""
        //                             };

        //                         // Process Correct Answers (assuming "Correct" column has comma-separated correct answer indices)
        //                         var correctAnswers = worksheet.Cells[row, 8].Value?.ToString();
        //                         if (!string.IsNullOrEmpty(correctAnswers))
        //                         {
        //                             var correctIndices = correctAnswers.Split(',')
        //                                 .Select(x => int.TryParse(x.Trim(), out int result) ? result : 0)
        //                                 .Where(x => x > 0 && x <= 4)
        //                                 .ToList();

        //                             for (int i = 0; i < correctIndices.Count; i++)
        //                             {
        //                                 if (correctIndices[i] <= 4) // Assuming only 4 answers
        //                                 {
        //                                     question.CorrectAnswers[correctIndices[i] - 1] = true;
        //                                 }
        //                             }
        //                         }

        //                         // Set additional properties from the Excel columns
        //                         question.Categories = worksheet.Cells[row, 2].Value?.ToString() ?? "";
        //                         question.UnderCategories = worksheet.Cells[row, 3].Value?.ToString() ?? "";
        //                         question.Picture = worksheet.Cells[row, 9].Value?.ToString() ?? "";
        //                         question.Time = int.TryParse(worksheet.Cells[row, 10].Value?.ToString(), out int time) ? time : 30; // Default 30 seconds
        //                         question.Difficulties = worksheet.Cells[row, 11].Value?.ToString() ?? "Unassigned";
        //                         question.QuestionStatus = worksheet.Cells[row, 12].Value?.ToString()?.ToLower() == "true" || worksheet.Cells[row, 12].Value?.ToString() == "1";
        //                         question.User = int.TryParse(worksheet.Cells[row, 13].Value?.ToString(), out int userId) ? userId : 1;


        //                         Questions.Add(new()
        //                             {
        //                                 questionModel = question
        //                             });
        //                     }
        //                 }
        //             }
        //         }
        //     }
        //     catch (Exception ex)
        //     {
        //         Console.WriteLine($"Error uploading file: {ex.Message}");
        //     }
    }
}

<style>
    .scrollable-dropdown {
        max-height: 200px;
        overflow-y: auto;
        overflow-x: hidden;
    }

        .scrollable-dropdown::-webkit-scrollbar {
            width: 8px;
        }
</style>
