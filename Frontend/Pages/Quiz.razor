@page "/quiz"
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h3>Quiz</h3>

<div>
    <label for="quizTitle">Titel:</label>
    <input type="text" id="quizTitle" @bind="Title" placeholder="Quiz titel" class="form-control" style="width: 40%" />
</div>



<table>
    <tr>
        <td>
            <div>
                <label for="mainCategory"></label>
                <Dropdown Display="Display.InlineBlock">
                    <DropdownToggle Color="Color.Primary">
                        @(CategoryID == 0 ? "Quiz Kategori" : categories.FirstOrDefault(c => c.ID == CategoryID)?.Category ?? "Select Main Category")
                    </DropdownToggle>
                    <DropdownMenu MaxMenuHeight="100px">
                        @foreach (var category in categories)
                        {
                            <DropdownItem @onclick="() => SelectMainCategory(category)">@category.Category</DropdownItem>
                        }
                    </DropdownMenu>
                </Dropdown>
            </div>
        </td>

        <td>
            <div>
                <label for="mainDifficulty"></label>
                <Dropdown Display="Display.InlineBlock">
                    <DropdownToggle Color="Color.Primary">
                        @(DifficultyID == 0 ? "Quiz Niveau" : difficulties.FirstOrDefault(c => c.ID == DifficultyID)?.Difficulty ?? "Select Main Difficulty")
                    </DropdownToggle>
                    <DropdownMenu MaxMenuHeight="100px">
                        @foreach (var difficulty in difficulties)
                        {
                            <DropdownItem @onclick="() => SelectMainDifficulty(difficulty)">@difficulty.Difficulty</DropdownItem>
                        }
                    </DropdownMenu>
                </Dropdown>
            </div>
        </td>
    </tr>
</table>


<div>
    @foreach (var question in CategoriesHandler)
    {
        @* simple drop down menu, very important *@
        <div class="drop-menu">
            <table>
                <tr>
                    <td>
                        <div class="dropdown-categories">
                            <Dropdown Display="Display.InlineBlock">
                                <DropdownToggle Color="Color.Primary">
                                    @(question.selectedCategory == null ? "Vælg Kategori" : question.selectedCategory.Category)
                                </DropdownToggle>
                                <DropdownMenu MaxMenuHeight="100px">
                                    @foreach (CategoriesDTO category in categories)
                                    {
                                        <DropdownItem @onclick="() => SelectCategory(category, question)">@category.Category</DropdownItem>
                                    }
                                </DropdownMenu>
                            </Dropdown>
                        </div>
                    </td>
                    <td>
                        <div class="dropdown-underCategories">
                            <Dropdown Display="Display.InlineBlock">
                                <DropdownToggle Color="Color.Primary">
                                    @(question.selectedUnderCategory == null ? "Vælg Underkategori" : question.selectedUnderCategory.UnderCategory)
                                </DropdownToggle>
                                <DropdownMenu MaxMenuHeight="100px">
                                    @foreach (UnderCategoriesGetDTO underCategory in underCategories)
                                    {
                                        <DropdownItem @onclick="() => SelectUnderCategory(underCategory, question)">@underCategory.UnderCategory</DropdownItem>
                                    }
                                </DropdownMenu>
                            </Dropdown>
                        </div>
                    </td>
                    <td>
                        <div class="dropdown-difficulties">
                            <Dropdown Display="Display.InlineBlock">
                                <DropdownToggle Color="Color.Primary">
                                    @(question.selectedDifficulty == null ? "Vælg Niveau" : question.selectedDifficulty.Difficulty)
                                </DropdownToggle>
                                <DropdownMenu MaxMenuHeight="100px">
                                    @foreach (DifficultiesDTO difficulty in difficulties)
                                    {
                                        <DropdownItem @onclick="() => SelectDifficulties(difficulty, question)">@difficulty.Difficulty</DropdownItem>
                                    }
                                </DropdownMenu>
                            </Dropdown>
                        </div>
                    </td>
                    <td>
                        <label for="questionCount">Antal</label>
                        <input type="number" @bind="question.DesiredQuestionCount" min="1" max="25" />
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteQuestionSet(question)">Slet Spørgsmål</button>
                    </td>
                    <td>
                        <button class="btn btn-success" @onclick="() => FetchQuestions(question)">Vis spørgsmål</button>
                    </td>
                </tr>
            </table>
        </div>

        <br>

        <h4>Tilgængelige spørgsmål:</h4>

        @* this is where the list is being displayed/made *@
        @if (question.Questions != null && question.Questions.Any())
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Valgt</th>
                        <th>Spørgsmål</th>
                        <th>Tid</th>
                        <th>Mulige svar</th>
                        <th>Rigtige svar</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var q in question.Questions)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" @bind="q.IsSelected" />
                            </td>
                            <td>@(!string.IsNullOrEmpty(q.Title) ? q.Title : "No Title")</td>
                            <td>@q.Time</td>
                            <td>@string.Join(", ", q.PossibleAnswers)</td>
                            <td>@string.Join(", ", q.CorrectAnswer)</td>
                        </tr>
                    }
                </tbody>

            </table>
        }
        else
        {
            <p>Ingen Spørgsmål</p>
        }
    }
</div>
@* end of dropdown menu  *@


<button class="btn btn-primary" @onclick="AddNewCategory" disabled="@(CategoriesHandler.Count >= MaxQuestions)">Tilføj flere spørgsmål</button>
<p>@SaveQuizMessage</p>

@* button for making the random quiz *@
<button class="btn btn-success" @onclick="RandomQuizMaking">Lav tilfældig quiz</button>
<button class="btn btn-success" @onclick="customQuiz">Gem valgte som quiz</button>

@code
{

    private class CategoryHandlingQuiz
    {
        public string Title { get; set; } = "Random Quiz";
        public CategoryDTO Categories { get; set; }
        public UnderCategoryGetDTO UnderCategories { get; set; }
        public DifficultyDTO Difficulties { get; set; }
        public string[] PossibleAnswers { get; set; }
        public int[] CorrectAnswer { get; set; }
        public int DesiredQuestionCount { get; set; }

        //public category dropdown
        public CategoryDTO? selectedCategory;
        public string dropdownCategory = "";

        //Public undercategory dropdown
        public UnderCategoryGetDTO? selectedUnderCategory;
        public string dropdownUnderCategory = "";

        //Public difficulty dropdown
        public DifficultyDTO? selectedDifficulty;
        public string dropdownDifficulty = "";

        public List<Question> Questions { get; set; } = new();
    }

    public class Question
    {
        public int ID { get; set; }
        public string Title { get; set; }
        public string Category { get; set; }
        public string UnderCategory { get; set; }
        public string Difficulty { get; set; }
        public int Time { get; set; }
        public string[] PossibleAnswers { get; set; }
        public int[] CorrectAnswer { get; set; }
        public bool IsSelected { get; set; }
    }

    [Inject] public HttpClient? Http { get; set; }
    private List<DifficultyDTO> difficulties = new();
    private List<CategoryDTO> categories = new();
    private List<UnderCategoryGetDTO> underCategories = new();
    private List<CategoryHandlingQuiz> CategoriesHandler = new();
    private int CategoryID { get; set; }
    private int DifficultyID { get; set; }
    private string Title { get; set; }
    private List<Question> Questions { get; set; } = new();
    private string SaveQuizMessage = string.Empty;
    private const int MaxQuestions = 25;

    public List<Question> GetSelectedQuestions()
    {
        var selectedQuestions = new List<Question>();
        foreach (var questionSet in CategoriesHandler)
        {
            if (questionSet.Questions != null)
            {
                selectedQuestions.AddRange(questionSet.Questions.Where(questionSet => questionSet.IsSelected));
            }
        }

        return selectedQuestions;
    }



    private bool mainCategoryDropdownVisible = false;
    private void ToggleMainCategoryDropdown()
    {
        mainCategoryDropdownVisible = !mainCategoryDropdownVisible;
    }

    private void SelectMainCategory(CategoryDTO Category)
    {
        CategoryID = Category.ID;
        mainCategoryDropdownVisible = false;
    }



    private bool mainDifficultyDropdownVisible = false;
    private void ToggleMainDifficultyDropdown()
    {
        mainDifficultyDropdownVisible = !mainDifficultyDropdownVisible;
    }

    private void SelectMainDifficulty(DifficultyDTO Difficulty)
    {
        DifficultyID = Difficulty.ID;
        mainDifficultyDropdownVisible = false;
    }

    //Get the question and info
    private async Task FetchQuestions(CategoryHandlingQuiz questionHandling)
    {
        if (Http == null || questionHandling.selectedCategory == null || questionHandling.selectedUnderCategory == null || questionHandling.selectedDifficulty == null) return;

        int categoryID = questionHandling.selectedCategory.ID;
        int underCategoryID = questionHandling.selectedUnderCategory.ID;
        int difficultyID = questionHandling.selectedDifficulty.ID;

        string url = $"/api/Questions";
        string jwt = await sessionStorage.GetItemAsStringAsync("jwtToken");

        Console.WriteLine("Fetching questions for selected category, undercategory, and difficulty.");
        if (Http == null || questionHandling.selectedCategory == null || questionHandling.selectedUnderCategory == null || questionHandling.selectedDifficulty == null)
        {
            Console.WriteLine("FetchQuestions aborted due to missing selections.");
            return;
        }

        (HttpStatusCode statusCode, List<Question>? questions) = await HttpHandler.GetAsync<List<Question>>(url, jwt, Http);

        if (statusCode == HttpStatusCode.OK)
        {
            questionHandling.Questions = questions?.Where(q => q.Category == questionHandling.selectedCategory.Category &&
            q.UnderCategory == questionHandling.selectedUnderCategory.UnderCategory &&
            q.Difficulty == questionHandling.selectedDifficulty.Difficulty).ToList() ?? new();

            Console.WriteLine($"Fetched {questionHandling.Questions.Count} questions.");
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("FUCK YOU");
        }

    }

    //method to make a random quiz by button press
    private async Task RandomQuizMaking()
    {
        if (Http == null) return;

        List<QuestionAmount> questions = new();
        for (int i = 0; i < CategoriesHandler.Count; i++)
        {
            questions.Add(new()
                {
                    Amount = CategoriesHandler[i].DesiredQuestionCount,
                    CategoryID = CategoriesHandler[i].selectedCategory?.ID ?? 0,
                    DifficultyID = CategoriesHandler[i].selectedDifficulty?.ID ?? 0,
                    UnderCategoryID = CategoriesHandler[i].selectedUnderCategory?.ID ?? 0
                });
        }

        int userID = await sessionStorage.GetItemAsync<int>("userID");
        string Jwt = await sessionStorage.GetItemAsync<string>("jwt");

        QuizCreateRandomDTO quizDto = new()
            {
                Title = Title,
                questions = questions.ToArray(),
                EducationID = 1,
                //Change to non static!!!
                CreatorID = userID,
                CategoryID = CategoryID,
                DifficultyID = DifficultyID,

            };


        // add "jwt" between quizDto and Http
        //set up url for API endpoint
        string url = "/api/Quizs/Setup-Quiz/Random";


        (HttpStatusCode statusCode, QuizDTO? response) =
           await HttpHandler.PostAsync<QuizDTO>(url, quizDto, Jwt, Http);

        if (statusCode == HttpStatusCode.Created)
        {
            //successfully made quiz
            //Retrive the quiz details if returned in the response
            SaveQuizMessage = "Quiz gemt succesfuldt";
        }
        else
        {
            //failed to make quiz
            SaveQuizMessage = "OH NO SHIT DONT WORK";
        }
    }

    private async Task customQuiz()
    {
        if (Http == null) return;

        var selectedQuestions = GetSelectedQuestions();

        if (selectedQuestions == null || !selectedQuestions.Any())
        {
            SaveQuizMessage = "Ingen spørgsmål valgt";
            return;
        }

        int userID = await sessionStorage.GetItemAsync<int>("userID");
        string jwt = await sessionStorage.GetItemAsync<string>("jwt");


        int[] questionIDs = selectedQuestions.Select(q => q.ID).ToArray();

        QuizCreateCustomDTO customQuizDto = new()
            {
                Title = Title,
                CreatorID = userID,
                EducationID = 1,
                CategoryID = CategoryID,
                DifficultyID = DifficultyID,
                questions = questionIDs,
            };

        string url = "/api/Quizs/Setup-Quiz/Custom";

        (HttpStatusCode statusCode, QuizDTO? response) =
        await HttpHandler.PostAsync<QuizDTO>(url, customQuizDto, jwt, Http);

        if (statusCode == HttpStatusCode.Created)
        {
            SaveQuizMessage = "Quiz gemt succesfuldt";
        }
        else
        {
            SaveQuizMessage = "Lortet fejlede";
        }
        StateHasChanged();
    }



    //getting info from API/DB
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Http == null) return;

        if (firstRender)
        {
            string Jwt = await sessionStorage.GetItemAsync<string>("jwt");

            (HttpStatusCode statusCodeDifficulties, List<DifficultyDTO>? getDifficulties) =
               await HttpHandler.GetAsync<List<DifficultyDTO>>("api/Difficulties", Jwt, Http);

            if (statusCodeDifficulties == HttpStatusCode.OK)
            {
                difficulties.AddRange(getDifficulties ?? new());
            }

            (HttpStatusCode statusCodeCategories, List<CategoryDTO>? getCategories) =
            await HttpHandler.GetAsync<List<CategoryDTO>>("api/Categories", Jwt, Http);
            if (statusCodeCategories == HttpStatusCode.OK)
            {
                categories.AddRange(getCategories ?? new());
            }


            (HttpStatusCode statusCodeUnderCategories, List<UnderCategoryGetDTO>? getUnderCategories) =
            await HttpHandler.GetAsync<List<UnderCategoryGetDTO>>("/api/UnderCategories", Jwt, Http);

            if (statusCodeUnderCategories == HttpStatusCode.OK)
            {
                underCategories.AddRange(getUnderCategories ?? new());
            }

            AddNewCategory();
        }

    }

    //delete button
    private void DeleteQuestionSet(CategoryHandlingQuiz categoryHandling)
    {
        CategoriesHandler.Remove(categoryHandling);
    }


    private void AddNewCategory()
    {
        CategoriesHandler.Add(new CategoryHandlingQuiz());
    }

    //simple drop down menu category
    // Toggle the visibility of the dropdown menu
    private void ToggleDropdownCategory(CategoryHandlingQuiz categoryHandling)
    {
        categoryHandling.dropdownCategory = categoryHandling.dropdownCategory == "" ? "show" : "";
        categoryHandling.dropdownUnderCategory = "";
        categoryHandling.dropdownDifficulty = "";
    }

    // Set the selected item and close the dropdown
    private void SelectCategory(CategoryDTO category, CategoryHandlingQuiz questionHandling)
    {
        questionHandling.selectedCategory = category;
        questionHandling.dropdownCategory = ""; // Hide the dropdown
    }


    //simple drop down menu for undercategory
    // Toggle the visibility of the dropdown menu
    private void ToggleDropdownUnderCategory(CategoryHandlingQuiz questionHandling)
    {
        questionHandling.dropdownUnderCategory = questionHandling.dropdownUnderCategory == "" ? "show" : "";
        questionHandling.dropdownCategory = "";
        questionHandling.dropdownDifficulty = "";
    }

    // Set the selected item and close the dropdown
    private void SelectUnderCategory(UnderCategoryGetDTO underCategory, CategoryHandlingQuiz underCategoryHandling)
    {
        underCategoryHandling.selectedUnderCategory = underCategory;
        underCategoryHandling.dropdownUnderCategory = ""; // Hide the dropdown
    }



    //simple drop down menu for difficulties
    // Toggle the visibility of the dropdown menu
    private void ToggleDropdownDifficulties(CategoryHandlingQuiz difficultyHandling)
    {
        difficultyHandling.dropdownDifficulty = difficultyHandling.dropdownDifficulty == "" ? "show" : "";
        difficultyHandling.dropdownCategory = "";
        difficultyHandling.dropdownUnderCategory = "";
    }

    // Set the selected item and close the dropdown
    private void SelectDifficulties(DifficultyDTO difficulties, CategoryHandlingQuiz difficultyHandling)
    {
        difficultyHandling.selectedDifficulty = difficulties;
        difficultyHandling.dropdownDifficulty = ""; // Hide the dropdown
    }
}

