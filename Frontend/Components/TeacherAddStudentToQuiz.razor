<CustomModal Title="@quiz.Title" @ref="modal" OnClose="Close"
             OnPrimaryAction="AddStudents" PrimaryButtonText="Add Student(s)">
    <BodyContent>
        <GenericListComponent T="UserDTO" Items="students?.Keys.ToList()"
                              NoItemsText="No students found assigned to this quiz">
            <BodyContent>
                <Column ColumnSize="ColumnSize.Is3">
                    <Card>
                        <CardHeader>
                            @context.username
                        </CardHeader>
                        <CardBody>
                            <Row>
                                <Column ColumnSize="ColumnSize.Is8">
                                    <p>Email: @context.email</p>
                                </Column>
                                <Column ColumnSize="ColumnSize.Is2">
                                    <Switch TValue="bool" CheckedChanged="Value => OnChanged(Value, context)">Add</Switch>
                                </Column>
                            </Row>
                        </CardBody>
                    </Card>
                </Column>
            </BodyContent>
        </GenericListComponent>
    </BodyContent>
</CustomModal>

@code {
    [CascadingParameter(Name = "HttpHandler")]
    private HttpHandler? httpHandler { get; set; }

    [CascadingParameter(Name = "JWTokenHandler")]
    private JWTokenHandler? jWTokenHandler { get; set; }

    [CascadingParameter(Name = "LoadingSpinner")]
    private LoadingSpinner? loading { get; set; }

    private CustomModal? modal;

    private QuizDTO quiz = new();
    private Dictionary<UserDTO, bool>? students = null;

    public async void Open(QuizDTO quiz)
    {
        if (httpHandler == null) return;
        if (jWTokenHandler == null) return;

        string jwt = await jWTokenHandler.GetToken();
        this.quiz = quiz;
        loading?.Start();
        modal?.Show();

        (HttpStatusCode statusCode, List<UserDTO> response) =
           await httpHandler.GetAsync<List<UserDTO>>(
               $"/api/User_Quiz/AllStudentsNotOnQuiz/{quiz.ID}", jwt);

        if (statusCode == HttpStatusCode.OK)
        {
            students = response.ToDictionary(res => res, res => false);
            StateHasChanged();
        }

        loading?.Stop();
    }

    private void Close()
    {
        students = null;
        modal?.Hide();
    }

    private void OnChanged(bool value, UserDTO user)
    {
        if (students?.TryGetValue(user, out bool v) ?? false)
        {
            students[user] = value;
        }
    }

    private async void AddStudents()
    {
        if (httpHandler == null) return;
        if (jWTokenHandler == null) return;
        if (students == null) return;

        string jwt = await jWTokenHandler.GetToken();
        loading?.Start();

        CreateMultiUsers_QuizDTO newUserToQuiz = new()
            {
                QuizID = quiz.ID ?? 0,
                UserID = students.Where(s => s.Value).Select(s => s.Key.ID).ToArray()
            };

        (HttpStatusCode statusCode, string response) = await httpHandler.PostAsync(
               $"/api/User_Quiz/MoreUsers", newUserToQuiz, jwt);

        if (statusCode == HttpStatusCode.Created)
        {
            Close();
        }

        loading?.Stop();
    }
}
