@page "/CategoryList"

@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<JWTokenHandler @ref="jWTokenHandler" />
<PageTitle>Category list</PageTitle>

<h3>CategoryList</h3>

<ListGroup Flush>
    @foreach (var (category, i) in categories.Select((category, index) => (category, index)))
    {
        <ListGroupItem >
            <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                <Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">
                    @category.Category
                </Heading>
                <Small>
                    <Button Class="btn" Color="Color.Primary" 
                    Clicked="() => categoryShowingUnderCategories != category ?
                            GetSubCategories(category) : ClearSubCategories()">
                        Show undercategories
                    </Button>
                </Small>
            </Div>

            @if (categoryShowingUnderCategories == category)
            {
                if (underCategories == null)
                {
                    <Small>
                        Loading...
                    </Small>
                }
                else
                {
                    if (underCategories.Count > 0)
                    {
                        foreach (UnderCategoryGetDTO item in underCategories)
                        {
                            <Div>
                                <Small>@item.UnderCategory</Small>
                            </Div>
                        }
                    }
                    else
                    {
                        <Small>No Under Category found.</Small>
                    }
                }
            }
        </ListGroupItem>
    }
</ListGroup>

<LoadingSpinner @ref="loading" />

@code {
    [Inject] public HttpClient? Http { get; set; }
    private JWTokenHandler? jWTokenHandler;
    private List<CategoryDTO> categories = new();
    private CategoryDTO? categoryShowingUnderCategories;
    private List<UnderCategoryGetDTO>? underCategories;
    private LoadingSpinner? loading;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Http == null) return;
            if (jWTokenHandler == null) return;

            loading?.Start();
            string jwt = await jWTokenHandler.GetToken();
            string userRole = await sessionStorage.GetItemAsync<string>("userRole");
            
            if (string.IsNullOrEmpty(userRole) || userRole == "Student")
            {
                NavigationManager.NavigateTo("/home");
                return;
            }

            (HttpStatusCode statusCode, List<CategoryDTO>? response) =
                await HttpHandler.GetAsync<List<CategoryDTO>>("api/Categories", jwt, Http);

            if (statusCode == HttpStatusCode.OK)
            {
                categories = response ?? new();
            }

            loading?.Stop();
        }
    }

    private Task ClearSubCategories()
    {
        underCategories = null;
        categoryShowingUnderCategories = null;
        return Task.CompletedTask;
    }

    private async Task GetSubCategories(CategoryDTO category)
    {
        await ClearSubCategories();
        categoryShowingUnderCategories = category;

        if (Http == null) return;
        if (jWTokenHandler == null) return;
        string jwt = await jWTokenHandler.GetToken();

        (HttpStatusCode statusCode, List<UnderCategoryGetDTO>? response) =
            await HttpHandler.GetAsync<List<UnderCategoryGetDTO>>(
                $"api/UnderCategories/CategoryID/{category.ID}",
                jwt, Http);

        if (statusCode == HttpStatusCode.OK)
        {
            underCategories = response ?? new();
        }
    }
}
