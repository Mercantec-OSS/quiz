@page "/createCategory"
@rendermode InteractiveServer
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>Create Category</PageTitle>

<h1>Create Category</h1>

<div class="m-1">
    <input type="text" placeholder="Main Category" @bind="mainCategory" id="mainCategory" />
</div>

<div class="m-1">
    <input type="text" placeholder="Add Under Category" @bind="currentUnderCategory" id="currentUnderCategory" />
    <button class="btn-primary btn" @onclick="CreateUnderCategory">Add Under Category</button>
</div>

<div class="m-1">
    <button class="btn-primary btn" @onclick="SaveToDB">Add Under Category</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Main categories</th>
            <th>Under categories</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (UnderCategory item in underCategories)
        {
            <tr>
                <td>@item.MainCategory</td>
                <td>@item.Category</td>
                <td><button class="btn-primary btn" @onclick="() => Edit(item)">Edit</button></td>
                <td><button class="btn-danger btn" @onclick="() => Delete(item)">Delete</button></td>
            </tr>
        }
    </tbody>
</table>

@if (UnderCategoryEditModelOpen)
{
    <div class="model custom-modal">
        <h4>Edit Under Category</h4>
        <div class="m-1">
            <input @bind="underCategoryBeenEditInModel" placeholder="Enter text here" />
        </div>
        <div class="m-1">
            <button class="btn-primary btn" @onclick="SaveEdit">Save</button>
            <button class="btn" @onclick="CloseEditModal">Cancel</button>
        </div>
    </div>

    <!-- Modal overlay (transparent background) -->
    <div @onclick="CloseEditModal" class="modal-overlay"></div>
}

@if (confirmDeletionOfUnderCategoryModelOpen)
{
    <div class="model custom-modal">
        <h4>Are you sure that you want to delete this under category?</h4>
        <div class="m-1">
            <button class="btn-danger btn" @onclick="DeleteConfirmed">Delete</button>
            <button class="btn" @onclick="CloseDeleteConfirmModal">Cancel</button>
        </div>
    </div>

    <!-- Modal overlay (transparent background) -->
    <div @onclick="CloseDeleteConfirmModal" class="modal-overlay"></div>
}

@code {
    private string mainCategory = string.Empty;
    private string currentUnderCategory = string.Empty;
    private List<UnderCategory> underCategories = new();

    private bool UnderCategoryEditModelOpen = false;
    private UnderCategory? underCategoryBeenEdit;
    private string underCategoryBeenEditInModel = string.Empty;

    private bool confirmDeletionOfUnderCategoryModelOpen = false;
    private UnderCategory? underCategoryNeededToBeConfirmed;

    private void CreateUnderCategory()
    {
        if (!string.IsNullOrWhiteSpace(currentUnderCategory))
        {
            underCategories.Add(new(currentUnderCategory, mainCategory));
            currentUnderCategory = string.Empty;
        }
    }

    private void Edit(UnderCategory underCategory)
    {
        underCategoryBeenEdit = underCategory;
        underCategoryBeenEditInModel = underCategory.Category;
        UnderCategoryEditModelOpen = true;
    }

    private void SaveEdit()
    {
        if (underCategoryBeenEdit == null) return;
        underCategoryBeenEdit.Category = underCategoryBeenEditInModel;
        CloseEditModal();
    }

    private void Delete(UnderCategory underCategory)
    {
        confirmDeletionOfUnderCategoryModelOpen = true;
        underCategoryNeededToBeConfirmed = underCategory;
    }

    private void DeleteConfirmed()
    {
        if (underCategoryNeededToBeConfirmed == null) return;
        underCategories.Remove(underCategoryNeededToBeConfirmed);
        CloseDeleteConfirmModal();
    }

    private void CloseEditModal() => UnderCategoryEditModelOpen = false;
    private void CloseDeleteConfirmModal() => confirmDeletionOfUnderCategoryModelOpen = false;

    private async void SaveToDB()
    {
        var response = await (new HttpClient()).PostAsJsonAsync("https://mercantec-quiz.onrender.com/api/Questions", dto);

    }

    public class UnderCategory(string category, string main)
    {
        public string MainCategory { get; set; } = main;
        public string Category { get; set; } = category;
    }
}

