@page "/createCategory"

<PageTitle>Create Category</PageTitle>

<Div style="display: flex; align-items: center; flex-direction: column;">
    <h1>Create Category</h1>

    <Div style="display: flex; flex-wrap: wrap; gap: 10px; align-items: center;">
        <Dropdown @ref="dropdown" Display="Display.InlineBlock">
            <Button Style="padding: 0 !important" Color="Color.Primary">
                <input type="text" class="form-control" placeholder="Search category..."
                       @oninput="SearchWordChange" @onselect="ShowDropdown" @bind="searchWord" />
            </Button>
            <DropdownToggle Class="h-100" Color="Color.Primary" Split />
            <DropdownMenu MaxMenuHeight="400px">
                @foreach (CategoryDTO category in string.IsNullOrEmpty(searchWord) ?
                categories : categories.Where(c =>
                c.Category.ToLower().Contains(searchWord.ToLower())))
                {
                    @if (category != selectedCategory)
                    {
                        <DropdownItem Clicked="() => SelectCategory(category)">
                            @category.Category
                        </DropdownItem>
                    }
                }
            </DropdownMenu>
        </Dropdown>

        <Button Class="btn btn-warning" Disabled="@(selectedCategory == null)"
                Clicked="() => ToggleEditCategoryModal(selectedCategory)">
            Edit Category
        </Button>

        <Button Class="btn btn-success" Clicked="OpenModalAddNewCategory">
            Add Category
        </Button>
    </Div>
</Div>

<Table Striped Resizable ResizeMode="TableResizeMode.Columns">
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Under Category</TableHeaderCell>
            <TableHeaderCell>Edit</TableHeaderCell>
            <TableHeaderCell>Delete</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (UnderCategoryGetDTO underCategory in underCategories)
        {
            <TableRow>
                <TableRowCell>@underCategory.UnderCategory</TableRowCell>
                <TableRowCell>
                    <button class="btn btn-warning"
                            @onclick="() => ToggleEditUnderCategoryModal(underCategory)">
                        Edit
                    </button>
                </TableRowCell>
                <TableRowCell>
                    <button class="btn btn-danger"
                            @onclick="() => ToggleDeleteConfirmation(underCategory)">
                        Delete
                    </button>
                </TableRowCell>
            </TableRow>
        }
        @if (selectedCategory != null)
        {
            <TableRow>
                <TableRowCell>
                    <button class="btn btn-primary" @onclick="OpenModalAddNewUnderCategory">
                        Add New Under Category
                    </button>
                </TableRowCell>
                <TableRowCell></TableRowCell>
                <TableRowCell></TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

<CustomModal Title="Add new category" @ref="modalAddNewCategory" OnClose="() => CloseModal(modalAddNewCategory)"
             OnPrimaryAction="AddNewCategory" PrimaryButtonText="Save" size="ModalSize.Default">
    <BodyContent>
        <Field>
            <TextEdit @bind-Text="newCategory" Placeholder="Enter category..." />
        </Field>
    </BodyContent>
</CustomModal>

<CustomModal Title="Add new under category" @ref="modalAddNewUnderCategory" OnClose="() => CloseModal(modalAddNewUnderCategory)"
             OnPrimaryAction="AddNewUnderCategory" PrimaryButtonText="Save" size="ModalSize.Default">
    <BodyContent>
        <Field>
            <TextEdit @bind-Text="newUnderCategory" Placeholder="Enter under category..." />
        </Field>
    </BodyContent>
</CustomModal>

<CustomModal Title="Edit category" @ref="modalEditCategory" OnClose="() => CloseModal(modalEditCategory)"
             OnPrimaryAction="SaveEditedCategory" PrimaryButtonText="Save" size="ModalSize.Default">
    <BodyContent>
        <Field>
            <TextEdit @bind-Text="editCategoryText" Placeholder="Enter category..." />
        </Field>
    </BodyContent>
</CustomModal>

<CustomModal Title="Edit under category" @ref="modalEditUnderCategory" OnClose="() => CloseModal(modalEditUnderCategory)"
             OnPrimaryAction="SaveEditedUnderCategory" PrimaryButtonText="Save" size="ModalSize.Default">
    <BodyContent>
        <Field>
            <TextEdit @bind-Text="editUnderCategoryText" Placeholder="Enter under category..." />
        </Field>
    </BodyContent>
</CustomModal>

<CustomModal Title="Are you sure you want to  delete this under category?" @ref="modalDeleteConfirmation" OnClose="() => CloseModal(modalDeleteConfirmation)"
             OnPrimaryAction="DeleteConfirmed" PrimaryButtonText="Delete" size="ModalSize.Default">
    <BodyContent>
        You can't undo this action.
    </BodyContent>
</CustomModal>

<CustomModal Title="An error happened!" @ref="modalErrorHappened" OnClose="() => CloseModal(modalErrorHappened)"
             size="ModalSize.Default">
    <BodyContent>
        You can't undo this action.
    </BodyContent>
</CustomModal>

@code {
    [CascadingParameter(Name = "HttpHandler")]
    private HttpHandler? httpHandler { get; set; }

    [CascadingParameter(Name = "JWTokenHandler")]
    private JWTokenHandler? jWTokenHandler { get; set; }

    [CascadingParameter(Name = "LoadingSpinner")]
    private LoadingSpinner? loading { get; set; }

    private CategoryDTO? selectedCategory = null;
    private List<CategoryDTO> categories = new();

    private List<UnderCategoryGetDTO> underCategories = new();

    private string newCategory = string.Empty;
    private string newUnderCategory = string.Empty;

    private string editCategoryText = string.Empty;
    private CategoryDTO? editCategory = null;

    private string editUnderCategoryText = string.Empty;
    private UnderCategoryGetDTO? editUnderCategory = null;

    private UnderCategoryGetDTO? underCategoryToBeDeleted = null;

    private string searchWord = string.Empty;

    private Dropdown? dropdown;
    private CustomModal? modalErrorHappened;

    private CustomModal? modalAddNewCategory;
    private CustomModal? modalAddNewUnderCategory;
    private CustomModal? modalEditCategory;
    private CustomModal? modalEditUnderCategory;
    private CustomModal? modalDeleteConfirmation;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (httpHandler == null) return;
            if (jWTokenHandler == null) return;

            string jwt = await jWTokenHandler.GetToken();

            loading?.Start();

            (HttpStatusCode statusCode, List<CategoryDTO> response) =
                await httpHandler.GetAsync<List<CategoryDTO>>("api/Categories", jwt);

            if (statusCode == HttpStatusCode.OK)
            {
                categories = response;
            }
            else
            {
                modalErrorHappened?.Show();
            }

            loading?.Stop();
        }
    }

    private void ShowDropdown() => dropdown?.Show();

    private void SearchWordChange(ChangeEventArgs e)
    {
        ShowDropdown();
        searchWord = e.Value?.ToString() ?? string.Empty;
    }

    private void CloseModal(CustomModal? modal) => modal?.Hide();

    private void OpenModalAddNewCategory()
    {
        newCategory = string.Empty;
        modalAddNewCategory?.Show();
    }

    private void OpenModalAddNewUnderCategory()
    {
        newUnderCategory = string.Empty;
        modalAddNewUnderCategory?.Show();
    }

    private void ToggleDeleteConfirmation(UnderCategoryGetDTO? underCategory = null)
    {
        underCategoryToBeDeleted = underCategory;
        if (underCategoryToBeDeleted == null)
        {
            modalDeleteConfirmation?.Hide();
            return;
        }
        modalDeleteConfirmation?.Show();
    }

    private void ToggleEditCategoryModal(CategoryDTO? category = null)
    {
        editCategory = category;
        editCategoryText = editCategory != null
            ? editCategory.Category : string.Empty;

        if (editCategory == null)
        {
            modalEditCategory?.Hide();
            return;
        }
        modalEditCategory?.Show();
    }

    private void ToggleEditUnderCategoryModal(UnderCategoryGetDTO? underCategory = null)
    {
        editUnderCategory = underCategory;
        editUnderCategoryText = editUnderCategory != null
            ? editUnderCategory.UnderCategory : string.Empty;

        if (editUnderCategory == null)
        {
            modalEditUnderCategory?.Hide();
            return;
        }
        modalEditUnderCategory?.Show();
    }

    private async Task SelectCategory(CategoryDTO category)
    {
        selectedCategory = category;

        if (httpHandler == null) return;
        if (jWTokenHandler == null) return;

        loading?.Start();
        string jwt = await jWTokenHandler.GetToken();

        (HttpStatusCode statusCode, List<UnderCategoryGetDTO> response) =
                await httpHandler.GetAsync<List<UnderCategoryGetDTO>>(
                    $"api/UnderCategories/CategoryID/{category.ID}", jwt);

        if (statusCode == HttpStatusCode.OK)
        {
            underCategories = response;
        }
        else
        {
            modalErrorHappened?.Show();
        }

        loading?.Stop();
    }

    private async Task SaveEditedCategory()
    {
        if (this.editCategory == null || jWTokenHandler == null || httpHandler == null)
        {
            ToggleEditCategoryModal();
            return;
        }

        loading?.Start();
        string jwt = await jWTokenHandler.GetToken();

        CategoryDTO editCategory = new()
            {
                ID = this.editCategory.ID,
                Category = editCategoryText,
                Education = this.editCategory.Education
            };

        HttpStatusCode statusCode = await httpHandler.PutAsync(
               $"/api/Categories/{editCategory.ID}", editCategory, jwt);

        if (statusCode == HttpStatusCode.OK)
        {
            this.editCategory.Category = editCategoryText;
        }
        else
        {
            modalErrorHappened?.Show();
        }

        ToggleEditCategoryModal();
        loading?.Stop();
    }

    private async Task SaveEditedUnderCategory()
    {
        if (jWTokenHandler == null || httpHandler == null || this.editUnderCategory == null)
        {
            ToggleEditUnderCategoryModal();
            return;
        }

        loading?.Start();
        string jwt = await jWTokenHandler.GetToken();

        UnderCategoryGetDTO editUnderCategory = new()
            {
                ID = this.editUnderCategory.ID,
                UnderCategory = editUnderCategoryText,
            };

        HttpStatusCode statusCode = await httpHandler.PutAsync(
               $"/api/UnderCategories/{editUnderCategory.ID}", editUnderCategory, jwt);

        if (statusCode == HttpStatusCode.NoContent)
        {
            this.editUnderCategory.UnderCategory = editUnderCategoryText;
        }
        else
        {
            modalErrorHappened?.Show();
        }

        ToggleEditUnderCategoryModal();
        loading?.Stop();
    }

    private async Task DeleteConfirmed()
    {
        if (jWTokenHandler == null || httpHandler == null || underCategoryToBeDeleted == null)
            return;

        loading?.Start();
        string jwt = await jWTokenHandler.GetToken();
        HttpStatusCode statusCode = await httpHandler.DeleteAsync(
                    $"/api/UnderCategories/{underCategoryToBeDeleted.ID}", jwt);

        if (statusCode == HttpStatusCode.NoContent)
        {
            underCategories.Remove(underCategoryToBeDeleted);
        }
        else
        {
            modalErrorHappened?.Show();
        }

        ToggleDeleteConfirmation();
        loading?.Stop();
    }

    private async Task AddNewCategory()
    {
        CloseModal(modalAddNewCategory);
        string newCategoryText = this.newCategory;
        this.newCategory = string.Empty;

        if (httpHandler == null) return;
        if (jWTokenHandler == null) return;

        loading?.Start();
        string jwt = await jWTokenHandler.GetToken();

        CategoryCreateDTO newCategory = new()
            {
                Category = newCategoryText,
                EducationID = 1,
            };

        (HttpStatusCode statusCode, CategoryDTO response) =
           await httpHandler.PostAsync<CategoryDTO>(
               $"api/Categories", newCategory, jwt);

        if (statusCode == HttpStatusCode.Created)
        {
            selectedCategory = response;
            categories.Add(response);
            underCategories.Clear();
        }
        else
        {
            modalErrorHappened?.Show();
        }

        loading?.Stop();
    }

    private async Task AddNewUnderCategory()
    {
        CloseModal(modalAddNewUnderCategory);
        string newUnderCategory = this.newUnderCategory;
        this.newUnderCategory = string.Empty;

        if (selectedCategory == null) return;
        if (httpHandler == null) return;
        if (jWTokenHandler == null) return;

        loading?.Start();
        string jwt = await jWTokenHandler.GetToken();

        UnderCategoryCreateDTO newUnderCategories = new()
            {
                UnderCategory = newUnderCategory,
                CategoryID = selectedCategory.ID
            };

        (HttpStatusCode statusCode, UnderCategoryGetDTO response) =
                await httpHandler.PostAsync<UnderCategoryGetDTO>(
                    $"api/UnderCategories", newUnderCategories, jwt);

        if (statusCode == HttpStatusCode.Created)
        {
            underCategories.Add(response);
        }
        else
        {
            modalErrorHappened?.Show();
        }

        loading?.Stop();
    }
}
