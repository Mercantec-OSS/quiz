@page "/TeacherMyPage"

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<JWTokenHandler @ref="jWTokenHandler" />
<LoadingSpinner @ref="loading" />

<PageTitle>My page</PageTitle>

<h3>My Page</h3>

@if (quizzesMaked.Count <= 0)
{
    <p>
        Loading...
    </p>
}
else
{
    <Row HorizontalGutter="10" VerticalGutter="10">
        @foreach (QuizDTO quiz in quizzesMaked)
        {
            <Column ColumnSize="ColumnSize.Is4">
                <Card>
                    <CardHeader>
                        @quiz.Title
                    </CardHeader>
                    <CardBody>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is6">
                                Category: @quiz.Category
                            </Column>
                            <Column ColumnSize="ColumnSize.Is6">
                                Difficulty: @quiz.Difficulty
                            </Column>
                        </Row>
                    </CardBody>
                    <CardFooter>
                        <Button Class="btn btn-primary w-100"
                                Clicked="() => ToggleQuizModal(quiz)">
                            Show details
                        </Button>
                    </CardFooter>
                </Card>
            </Column>
        }
    </Row>
}

<Modal @ref="modalShowUsersToQuiz">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@quizOpenInModal.Title</ModalTitle>
            <CloseButton Clicked="() => ToggleQuizModal()" />
        </ModalHeader>
        <ModalBody>
            @if (usersToQuizModal == null)
            {
                <Div>Loading...</Div>
            }
            else
            {
                @if (usersToQuizModal.Count <= 0)
                {
                    <Div>No students found assigned to this quiz</Div>
                }
                else
                {
                    <Row HorizontalGutter="10" VerticalGutter="10">
                        @foreach (User_QuizUserInfoDTO userQuiz in usersToQuizModal)
                        {
                            <Column ColumnSize="ColumnSize.Is6">
                                <Card>
                                    <CardHeader>
                                        <h3 class="card-title">@userQuiz.User.username</h3>
                                    </CardHeader>
                                    <CardBody>
                                        <Row>
                                            <Column ColumnSize="ColumnSize.Is6">
                                                <p class="card-text">Email: @userQuiz.User.email</p>
                                            </Column>
                                            <Column ColumnSize="ColumnSize.Is6">
                                                <p class="card-text">Score: @userQuiz.Results</p>
                                            </Column>
                                        </Row>
                                    </CardBody>
                                </Card>
                            </Column>
                        }
                    </Row>
                }
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => ToggleQuizModal()">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Inject] public HttpClient? Http { get; set; }
    private JWTokenHandler? jWTokenHandler;
    private List<QuizDTO> quizzesMaked = new();

    private QuizDTO quizOpenInModal = new();
    private List<User_QuizUserInfoDTO>? usersToQuizModal = null;

    private LoadingSpinner? loading;
    private Modal? modalShowUsersToQuiz;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Http == null) return;
            if (jWTokenHandler == null) return;

            string jwt = await jWTokenHandler.GetToken();
            int id = await sessionStorage.GetItemAsync<int>("userID");
            loading?.Start();

            (HttpStatusCode statusCode, List<QuizDTO>? response) =
                await HttpHandler.GetAsync<List<QuizDTO>>(
                    $"/api/Quizs/ByCreater/{id}", jwt, Http);

            if (statusCode == HttpStatusCode.OK)
            {
                quizzesMaked = response ?? new();
                StateHasChanged();
            }
            loading?.Stop();
        }
    }

    private async Task ToggleQuizModal(QuizDTO? quiz = null)
    {
        usersToQuizModal = null;
        quizOpenInModal = quiz ?? new();

        if (quiz == null || Http == null || jWTokenHandler == null)
        {
            modalShowUsersToQuiz?.Hide();
            return;
        }

        modalShowUsersToQuiz?.Show();
        loading?.Start();
        string jwt = await jWTokenHandler.GetToken();

        (HttpStatusCode statusCode, List<User_QuizUserInfoDTO>? response) =
           await HttpHandler.GetAsync<List<User_QuizUserInfoDTO>>(
               $"/api/User_Quiz/AllStudents/{quiz.ID}", jwt, Http);

        if (statusCode == HttpStatusCode.OK)
        {
            usersToQuizModal = response ?? new();
        }

        loading?.Stop();
    }
}
