@page "/TeacherMyPage"

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<JWTokenHandler @ref="jWTokenHandler" />
<LoadingSpinner @ref="loading" />
<TeacherQuizInfoModal @ref="teacherQuizInfoModal" />
<TeacherAddStudentToQuiz @ref="teacherAddStudentToQuiz" />

<PageTitle>My page</PageTitle>

<h3>My Page</h3>

<GenericListComponent T="QuizDTO" Items="quizzesMaked"
    NoItemsText="You haven't created any quizzes.">
    <BodyContent>
        <Column ColumnSize="ColumnSize.Is4">
            <Card>
                <CardHeader>
                    @context.Title
                </CardHeader>
                <CardBody>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6">
                            Category: @context.Category
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6">
                            Difficulty: @context.Difficulty
                        </Column>
                    </Row>
                </CardBody>
                <CardFooter>
                    <Button Class="btn btn-primary w-100"
                            Clicked="() => OpenQuizModal(context)">
                        Show details
                    </Button>
                </CardFooter>
            </Card>
        </Column>
    </BodyContent>
</GenericListComponent>

@code {
    [Inject] public HttpClient? Http { get; set; }
    private JWTokenHandler? jWTokenHandler;
    private LoadingSpinner? loading;
    private TeacherQuizInfoModal? teacherQuizInfoModal;
    private TeacherAddStudentToQuiz? teacherAddStudentToQuiz;

    private List<QuizDTO> quizzesMaked = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Http == null) return;
            if (jWTokenHandler == null) return;

            string jwt = await jWTokenHandler.GetToken();
            int id = await sessionStorage.GetItemAsync<int>("userID");
            loading?.Start();

            (HttpStatusCode statusCode, List<QuizDTO>? response) =
                await HttpHandler.GetAsync<List<QuizDTO>>(
                    $"/api/Quizs/ByCreater/{id}", jwt, Http);

            if (statusCode == HttpStatusCode.OK)
            {
                quizzesMaked = response ?? new();
                StateHasChanged();
            }
            loading?.Stop();
        }
    }

    private void OpenQuizModal(QuizDTO quiz)
    {
        teacherQuizInfoModal?.Open(quiz, OpenQuizAddStudents);
    }

    public void OpenQuizAddStudents(QuizDTO quiz)
    {
        teacherAddStudentToQuiz?.Open(quiz, OpenQuizModal);
    }
}
